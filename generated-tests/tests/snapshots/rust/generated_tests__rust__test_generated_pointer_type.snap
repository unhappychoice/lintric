---
source: generated-tests/tests/rust.rs
expression: snapshot_content
---
Source Code:
let ptr: *const i32 = std::ptr::null();

AST:
(source_file
  (let_declaration
    (identifier ptr)
    (pointer_type
      (primitive_type)
    )
    (call_expression
      (scoped_identifier
        (scoped_identifier
          (identifier std)
          (identifier ptr)
        )
        (identifier null)
      )
      (arguments)
    )
  )
)

IR:
IntermediateRepresentation {
    file_path: "<memory>",
    definitions: [
        Definition {
            name: "ptr",
            line_number: 1,
            definition_type: VariableDefinition,
            scope: None,
        },
    ],
    dependencies: [],
    usage: [
        SerializableUsage {
            name: "ptr",
            kind: Identifier,
            scope: None,
            start_line: 1,
            start_column: 5,
            end_line: 1,
            end_column: 8,
        },
        SerializableUsage {
            name: "std::ptr::null()",
            kind: CallExpression,
            scope: None,
            start_line: 1,
            start_column: 23,
            end_line: 1,
            end_column: 39,
        },
        SerializableUsage {
            name: "std",
            kind: Identifier,
            scope: None,
            start_line: 1,
            start_column: 23,
            end_line: 1,
            end_column: 26,
        },
        SerializableUsage {
            name: "ptr",
            kind: Identifier,
            scope: None,
            start_line: 1,
            start_column: 28,
            end_line: 1,
            end_column: 31,
        },
        SerializableUsage {
            name: "null",
            kind: Identifier,
            scope: None,
            start_line: 1,
            start_column: 33,
            end_line: 1,
            end_column: 37,
        },
    ],
    analysis_metadata: AnalysisMetadata {
        language: "Rust",
        total_lines: 1,
        analysis_timestamp: "now",
        lintric_version: "0.1.0",
    },
}
