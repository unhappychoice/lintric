---
source: crates/core/tests/rust/mod.rs
expression: ir_snapshot_content
---
Source Code:
macro_rules! my_macro {
    ($e:expr) => {
        println!("{}", $e);
    };
}

fn main() {
    my_macro!("Hello, custom macro!");
}

AST:
(source_file
  (macro_definition
    name: (identifier "my_macro")
    (macro_rule
      left: (token_tree_pattern
        (token_binding_pattern
          name: (metavariable)
          type: (fragment_specifier)
        )
      )
      right: (token_tree
        (identifier "println")
        (token_tree
          (string_literal ""{}""
            (string_content)
          )
          (metavariable)
        )
      )
    )
  )
  (function_item
    name: (identifier "main")
    parameters: (parameters)
    body: (block
      (expression_statement
        (macro_invocation
          macro: (identifier "my_macro")
          (token_tree
            (string_literal ""Hello, custom macro!""
              (string_content)
            )
          )
        )
      )
    )
  )
)

IR:
IntermediateRepresentation {
    file_path: "tests/rust/fixtures/macro_invocation_dependency.rs",
    definitions: [
        Definition {
            name: "my_macro",
            position: Position {
                start_line: 1,
                start_column: 14,
                end_line: 1,
                end_column: 22,
            },
            definition_type: MacroDefinition,
        },
        Definition {
            name: "$e",
            position: Position {
                start_line: 2,
                start_column: 6,
                end_line: 2,
                end_column: 8,
            },
            definition_type: MacroVariableDefinition,
        },
        Definition {
            name: "main",
            position: Position {
                start_line: 7,
                start_column: 4,
                end_line: 7,
                end_column: 8,
            },
            definition_type: FunctionDefinition,
        },
    ],
    dependencies: [
        Dependency {
            source_line: 3,
            target_line: 2,
            symbol: "$e",
            dependency_type: MacroVariable,
            context: Some(
                "metavariable_use",
            ),
        },
        Dependency {
            source_line: 8,
            target_line: 1,
            symbol: "my_macro",
            dependency_type: VariableUse,
            context: Some(
                "variable_use",
            ),
        },
    ],
    usage: [
        Usage {
            name: "my_macro",
            kind: Identifier,
            position: Position {
                start_line: 1,
                start_column: 14,
                end_line: 1,
                end_column: 22,
            },
        },
        Usage {
            name: "$e",
            kind: Metavariable,
            position: Position {
                start_line: 2,
                start_column: 6,
                end_line: 2,
                end_column: 8,
            },
        },
        Usage {
            name: "println",
            kind: Identifier,
            position: Position {
                start_line: 3,
                start_column: 9,
                end_line: 3,
                end_column: 16,
            },
        },
        Usage {
            name: "$e",
            kind: Metavariable,
            position: Position {
                start_line: 3,
                start_column: 24,
                end_line: 3,
                end_column: 26,
            },
        },
        Usage {
            name: "my_macro",
            kind: Identifier,
            position: Position {
                start_line: 8,
                start_column: 5,
                end_line: 8,
                end_column: 13,
            },
        },
    ],
    analysis_metadata: AnalysisMetadata {
        language: "Rust",
        total_lines: 9,
        analysis_timestamp: "now",
        lintric_version: "0.1.0",
    },
}
