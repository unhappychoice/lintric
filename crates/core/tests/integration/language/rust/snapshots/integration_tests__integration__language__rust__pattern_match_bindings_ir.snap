---
source: crates/core/tests/integration/language/rust/mod.rs
expression: ir_snapshot_content
---
Source Code:
fn main() {
    let option_value = Some(10);
    if let Some(value) = option_value {
        println!("Value: {}", value);
    }

    let numbers = vec![1, 2, 3];
    for num in numbers {
        println!("Number: {}", num);
    }

    let mut iter = Some(5);
    while let Some(i) = iter {
        println!("Iteration: {}", i);
        iter = if i > 0 { Some(i - 1) } else { None };
    }
}


AST:
(source_file
  (function_item
    name: (identifier "main")
    parameters: (parameters)
    body: (block
      (let_declaration
        pattern: (identifier "option_value")
        value: (call_expression
          function: (identifier "Some")
          arguments: (arguments
            (integer_literal "10")
          )
        )
      )
      (expression_statement
        (if_expression
          condition: (let_condition
            pattern: (tuple_struct_pattern
              type: (identifier "Some")
              (identifier "value")
            )
            value: (identifier "option_value")
          )
          consequence: (block
            (expression_statement
              (macro_invocation
                macro: (identifier "println")
                (token_tree
                  (string_literal ""Value: {}""
                    (string_content)
                  )
                  (identifier "value")
                )
              )
            )
          )
        )
      )
      (let_declaration
        pattern: (identifier "numbers")
        value: (macro_invocation
          macro: (identifier "vec")
          (token_tree
            (integer_literal "1")
            (integer_literal "2")
            (integer_literal "3")
          )
        )
      )
      (expression_statement
        (for_expression
          pattern: (identifier "num")
          value: (identifier "numbers")
          body: (block
            (expression_statement
              (macro_invocation
                macro: (identifier "println")
                (token_tree
                  (string_literal ""Number: {}""
                    (string_content)
                  )
                  (identifier "num")
                )
              )
            )
          )
        )
      )
      (let_declaration
        (mutable_specifier)
        pattern: (identifier "iter")
        value: (call_expression
          function: (identifier "Some")
          arguments: (arguments
            (integer_literal "5")
          )
        )
      )
      (expression_statement
        (while_expression
          condition: (let_condition
            pattern: (tuple_struct_pattern
              type: (identifier "Some")
              (identifier "i")
            )
            value: (identifier "iter")
          )
          body: (block
            (expression_statement
              (macro_invocation
                macro: (identifier "println")
                (token_tree
                  (string_literal ""Iteration: {}""
                    (string_content)
                  )
                  (identifier "i")
                )
              )
            )
            (expression_statement
              (assignment_expression
                left: (identifier "iter")
                right: (if_expression
                  condition: (binary_expression
                    left: (identifier "i")
                    right: (integer_literal "0")
                  )
                  consequence: (block
                    (call_expression
                      function: (identifier "Some")
                      arguments: (arguments
                        (binary_expression
                          left: (identifier "i")
                          right: (integer_literal "1")
                        )
                      )
                    )
                  )
                  alternative: (else_clause
                    (block
                      (identifier "None")
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

IR:
IntermediateRepresentation {
    file_path: "tests/integration/language/rust/fixtures/pattern_match_bindings.rs",
    definitions: [
        Definition { position: { 1:4 to 1:8 }, name: "main", definition_type: FunctionDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 2:9 to 2:21 }, name: "option_value", definition_type: VariableDefinition, scope_id: Some(2), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 3:17 to 3:22 }, name: "value", definition_type: VariableDefinition, scope_id: Some(3), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 7:9 to 7:16 }, name: "numbers", definition_type: VariableDefinition, scope_id: Some(2), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 8:9 to 8:12 }, name: "num", definition_type: VariableDefinition, scope_id: Some(5), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 12:13 to 12:17 }, name: "iter", definition_type: VariableDefinition, scope_id: Some(2), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 13:20 to 13:21 }, name: "i", definition_type: VariableDefinition, scope_id: Some(7), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
    ],
    dependencies: [
        Dependency { source_line: 3, target_line: 2, symbol: "option_value", dependency_type: VariableUse, context: Some("Identifier:3:26") },
        Dependency { source_line: 4, target_line: 3, symbol: "value", dependency_type: VariableUse, context: Some("Identifier:4:31") },
        Dependency { source_line: 8, target_line: 7, symbol: "numbers", dependency_type: VariableUse, context: Some("Identifier:8:16") },
        Dependency { source_line: 9, target_line: 8, symbol: "num", dependency_type: VariableUse, context: Some("Identifier:9:32") },
        Dependency { source_line: 13, target_line: 12, symbol: "iter", dependency_type: VariableUse, context: Some("Identifier:13:25") },
        Dependency { source_line: 14, target_line: 13, symbol: "i", dependency_type: VariableUse, context: Some("Identifier:14:35") },
        Dependency { source_line: 15, target_line: 12, symbol: "iter", dependency_type: VariableUse, context: Some("Identifier:15:9") },
        Dependency { source_line: 15, target_line: 13, symbol: "i", dependency_type: VariableUse, context: Some("Identifier:15:19") },
        Dependency { source_line: 15, target_line: 13, symbol: "i", dependency_type: VariableUse, context: Some("Identifier:15:32") },
    ],
    usage: [
        Usage { position: { 2:24 to 2:32 }, name: "Some", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 3:12 to 3:16 }, name: "Some", kind: Identifier, context: None },
        Usage { position: { 3:17 to 3:22 }, name: "value", kind: Identifier, context: None },
        Usage { position: { 3:26 to 3:38 }, name: "option_value", kind: Identifier, context: None },
        Usage { position: { 4:9 to 4:16 }, name: "println", kind: Identifier, context: None },
        Usage { position: { 4:31 to 4:36 }, name: "value", kind: Identifier, context: None },
        Usage { position: { 7:19 to 7:22 }, name: "vec", kind: Identifier, context: None },
        Usage { position: { 8:16 to 8:23 }, name: "numbers", kind: Identifier, context: None },
        Usage { position: { 9:9 to 9:16 }, name: "println", kind: Identifier, context: None },
        Usage { position: { 9:32 to 9:35 }, name: "num", kind: Identifier, context: None },
        Usage { position: { 12:20 to 12:27 }, name: "Some", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 13:15 to 13:19 }, name: "Some", kind: Identifier, context: None },
        Usage { position: { 13:20 to 13:21 }, name: "i", kind: Identifier, context: None },
        Usage { position: { 13:25 to 13:29 }, name: "iter", kind: Identifier, context: None },
        Usage { position: { 14:9 to 14:16 }, name: "println", kind: Identifier, context: None },
        Usage { position: { 14:35 to 14:36 }, name: "i", kind: Identifier, context: None },
        Usage { position: { 15:9 to 15:13 }, name: "iter", kind: Identifier, context: None },
        Usage { position: { 15:19 to 15:20 }, name: "i", kind: Identifier, context: None },
        Usage { position: { 15:27 to 15:38 }, name: "Some", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 15:32 to 15:33 }, name: "i", kind: Identifier, context: Some("call_expression") },
        Usage { position: { 15:48 to 15:52 }, name: "None", kind: Identifier, context: None },
    ],
    analysis_metadata: AnalysisMetadata {
        language: "Rust",
        total_lines: 17,
        analysis_timestamp: "now",
        lintric_version: "0.1.0",
    },
}
