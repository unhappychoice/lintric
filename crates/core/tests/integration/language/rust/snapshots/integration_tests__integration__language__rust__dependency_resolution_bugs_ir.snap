---
source: crates/core/tests/integration/language/rust/mod.rs
expression: ir_snapshot_content
---
Source Code:
use std::collections::HashMap;
use std::vec::Vec;

struct TestStruct {
    field: HashMap<String, i32>,
}

impl TestStruct {
    pub fn new(data: HashMap<String, i32>) -> Self {
        let vec_data = Vec::new();
        TestStruct {
            field: data,
        }
    }
    
    pub fn process(&self, input: String) -> Option<i32> {
        self.field.get(&input).copied()
    }
}

fn main() {
    let mut map = HashMap::new();
    map.insert("test".to_string(), 42);
    let mut vec_data = Vec::new();
    vec_data.push(1);
    let test = TestStruct::new(map);
    let result = test.process("key".to_string());
}

AST:
(source_file
  (use_declaration
    argument: (scoped_identifier "std::collections::HashMap"
      path: (scoped_identifier "std::collections"
        path: (identifier "std")
        name: (identifier "collections")
      )
      name: (identifier "HashMap")
    )
  )
  (use_declaration
    argument: (scoped_identifier "std::vec::Vec"
      path: (scoped_identifier "std::vec"
        path: (identifier "std")
        name: (identifier "vec")
      )
      name: (identifier "Vec")
    )
  )
  (struct_item
    name: (type_identifier "TestStruct")
    body: (field_declaration_list
      (field_declaration
        name: (field_identifier "field")
        type: (generic_type
          type: (type_identifier "HashMap")
          type_arguments: (type_arguments
            (type_identifier "String")
            (primitive_type "i32")
          )
        )
      )
    )
  )
  (impl_item
    type: (type_identifier "TestStruct")
    body: (declaration_list
      (function_item
        (visibility_modifier)
        name: (identifier "new")
        parameters: (parameters
          (parameter
            pattern: (identifier "data")
            type: (generic_type
              type: (type_identifier "HashMap")
              type_arguments: (type_arguments
                (type_identifier "String")
                (primitive_type "i32")
              )
            )
          )
        )
        return_type: (type_identifier "Self")
        body: (block
          (let_declaration
            pattern: (identifier "vec_data")
            value: (call_expression
              function: (scoped_identifier "Vec::new"
                path: (identifier "Vec")
                name: (identifier "new")
              )
              arguments: (arguments)
            )
          )
          (struct_expression
            name: (type_identifier "TestStruct")
            body: (field_initializer_list
              (field_initializer
                field: (field_identifier "field")
                value: (identifier "data")
              )
            )
          )
        )
      )
      (function_item
        (visibility_modifier)
        name: (identifier "process")
        parameters: (parameters
          (self_parameter
            (self "self")
          )
          (parameter
            pattern: (identifier "input")
            type: (type_identifier "String")
          )
        )
        return_type: (generic_type
          type: (type_identifier "Option")
          type_arguments: (type_arguments
            (primitive_type "i32")
          )
        )
        body: (block
          (call_expression
            function: (field_expression
              value: (call_expression
                function: (field_expression
                  value: (field_expression
                    value: (self "self")
                    field: (field_identifier "field")
                  )
                  field: (field_identifier "get")
                )
                arguments: (arguments
                  (reference_expression
                    value: (identifier "input")
                  )
                )
              )
              field: (field_identifier "copied")
            )
            arguments: (arguments)
          )
        )
      )
    )
  )
  (function_item
    name: (identifier "main")
    parameters: (parameters)
    body: (block
      (let_declaration
        (mutable_specifier)
        pattern: (identifier "map")
        value: (call_expression
          function: (scoped_identifier "HashMap::new"
            path: (identifier "HashMap")
            name: (identifier "new")
          )
          arguments: (arguments)
        )
      )
      (expression_statement
        (call_expression
          function: (field_expression
            value: (identifier "map")
            field: (field_identifier "insert")
          )
          arguments: (arguments
            (call_expression
              function: (field_expression
                value: (string_literal ""test""
                  (string_content)
                )
                field: (field_identifier "to_string")
              )
              arguments: (arguments)
            )
            (integer_literal "42")
          )
        )
      )
      (let_declaration
        (mutable_specifier)
        pattern: (identifier "vec_data")
        value: (call_expression
          function: (scoped_identifier "Vec::new"
            path: (identifier "Vec")
            name: (identifier "new")
          )
          arguments: (arguments)
        )
      )
      (expression_statement
        (call_expression
          function: (field_expression
            value: (identifier "vec_data")
            field: (field_identifier "push")
          )
          arguments: (arguments
            (integer_literal "1")
          )
        )
      )
      (let_declaration
        pattern: (identifier "test")
        value: (call_expression
          function: (scoped_identifier "TestStruct::new"
            path: (identifier "TestStruct")
            name: (identifier "new")
          )
          arguments: (arguments
            (identifier "map")
          )
        )
      )
      (let_declaration
        pattern: (identifier "result")
        value: (call_expression
          function: (field_expression
            value: (identifier "test")
            field: (field_identifier "process")
          )
          arguments: (arguments
            (call_expression
              function: (field_expression
                value: (string_literal ""key""
                  (string_content)
                )
                field: (field_identifier "to_string")
              )
              arguments: (arguments)
            )
          )
        )
      )
    )
  )
)

IR:
IntermediateRepresentation {
    file_path: "tests/integration/language/rust/fixtures/dependency_resolution_bugs.rs",
    definitions: [
        Definition { position: { 1:23 to 1:30 }, name: "HashMap", definition_type: ImportDefinition, scope_id: Some(0), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 2:15 to 2:18 }, name: "Vec", definition_type: ImportDefinition, scope_id: Some(0), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 4:8 to 4:18 }, name: "TestStruct", definition_type: StructDefinition, scope_id: Some(0), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 5:5 to 5:10 }, name: "field", definition_type: StructFieldDefinition, scope_id: Some(0), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 9:12 to 9:15 }, name: "new", definition_type: MethodDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 9:16 to 9:20 }, name: "data", definition_type: VariableDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 10:13 to 10:21 }, name: "vec_data", definition_type: VariableDefinition, scope_id: Some(3), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 16:12 to 16:19 }, name: "process", definition_type: MethodDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 16:27 to 16:32 }, name: "input", definition_type: VariableDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 21:4 to 21:8 }, name: "main", definition_type: FunctionDefinition, scope_id: Some(6), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 22:13 to 22:16 }, name: "map", definition_type: VariableDefinition, scope_id: Some(7), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 24:13 to 24:21 }, name: "vec_data", definition_type: VariableDefinition, scope_id: Some(7), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 26:9 to 26:13 }, name: "test", definition_type: VariableDefinition, scope_id: Some(7), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 27:9 to 27:15 }, name: "result", definition_type: VariableDefinition, scope_id: Some(7), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
    ],
    dependencies: [
        Dependency { source_line: 5, target_line: 1, symbol: "HashMap", dependency_type: TypeReference, context: Some("TypeIdentifier:5:12") },
        Dependency { source_line: 8, target_line: 4, symbol: "TestStruct", dependency_type: TypeReference, context: Some("TypeIdentifier:8:6") },
        Dependency { source_line: 9, target_line: 1, symbol: "HashMap", dependency_type: TypeReference, context: Some("TypeIdentifier:9:22") },
        Dependency { source_line: 10, target_line: 2, symbol: "Vec", dependency_type: VariableUse, context: Some("Identifier:10:24") },
        Dependency { source_line: 11, target_line: 4, symbol: "TestStruct", dependency_type: TypeReference, context: Some("TypeIdentifier:11:9") },
        Dependency { source_line: 12, target_line: 9, symbol: "data", dependency_type: VariableUse, context: Some("Identifier:12:20") },
        Dependency { source_line: 17, target_line: 5, symbol: "field", dependency_type: StructFieldAccess, context: Some("FieldExpression:17:9") },
        Dependency { source_line: 17, target_line: 16, symbol: "input", dependency_type: VariableUse, context: Some("Identifier:17:25") },
        Dependency { source_line: 22, target_line: 1, symbol: "HashMap", dependency_type: VariableUse, context: Some("Identifier:22:19") },
        Dependency { source_line: 23, target_line: 22, symbol: "map", dependency_type: VariableUse, context: Some("Identifier:23:5") },
        Dependency { source_line: 24, target_line: 2, symbol: "Vec", dependency_type: VariableUse, context: Some("Identifier:24:24") },
        Dependency { source_line: 25, target_line: 24, symbol: "vec_data", dependency_type: VariableUse, context: Some("Identifier:25:5") },
        Dependency { source_line: 26, target_line: 4, symbol: "TestStruct", dependency_type: VariableUse, context: Some("Identifier:26:16") },
        Dependency { source_line: 26, target_line: 9, symbol: "new", dependency_type: VariableUse, context: Some("Identifier:26:28") },
        Dependency { source_line: 26, target_line: 22, symbol: "map", dependency_type: VariableUse, context: Some("Identifier:26:32") },
        Dependency { source_line: 27, target_line: 16, symbol: "process", dependency_type: StructFieldAccess, context: Some("FieldExpression:27:18") },
        Dependency { source_line: 27, target_line: 26, symbol: "test", dependency_type: VariableUse, context: Some("Identifier:27:18") },
    ],
    usage: [
        Usage { position: { 1:5 to 1:8 }, name: "std", kind: TypeIdentifier, context: Some("scoped_identifier") },
        Usage { position: { 1:10 to 1:21 }, name: "collections", kind: TypeIdentifier, context: Some("scoped_identifier") },
        Usage { position: { 1:23 to 1:30 }, name: "HashMap", kind: TypeIdentifier, context: Some("scoped_identifier") },
        Usage { position: { 2:5 to 2:8 }, name: "std", kind: TypeIdentifier, context: Some("scoped_identifier") },
        Usage { position: { 2:10 to 2:13 }, name: "vec", kind: TypeIdentifier, context: Some("scoped_identifier") },
        Usage { position: { 2:15 to 2:18 }, name: "Vec", kind: TypeIdentifier, context: Some("scoped_identifier") },
        Usage { position: { 5:12 to 5:19 }, name: "HashMap", kind: TypeIdentifier, context: None },
        Usage { position: { 5:20 to 5:26 }, name: "String", kind: TypeIdentifier, context: None },
        Usage { position: { 8:6 to 8:16 }, name: "TestStruct", kind: TypeIdentifier, context: None },
        Usage { position: { 9:22 to 9:29 }, name: "HashMap", kind: TypeIdentifier, context: None },
        Usage { position: { 9:30 to 9:36 }, name: "String", kind: TypeIdentifier, context: None },
        Usage { position: { 9:47 to 9:51 }, name: "Self", kind: TypeIdentifier, context: None },
        Usage { position: { 10:24 to 10:34 }, name: "Vec::new", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 10:24 to 10:27 }, name: "Vec", kind: Identifier, context: Some("scoped_identifier") },
        Usage { position: { 10:29 to 10:32 }, name: "new", kind: Identifier, context: Some("scoped_identifier") },
        Usage { position: { 11:9 to 13:10 }, name: "TestStruct {\n            field: data,\n        }", kind: StructExpression, context: None },
        Usage { position: { 11:9 to 11:19 }, name: "TestStruct", kind: TypeIdentifier, context: None },
        Usage { position: { 12:20 to 12:24 }, name: "data", kind: Identifier, context: None },
        Usage { position: { 16:34 to 16:40 }, name: "String", kind: TypeIdentifier, context: None },
        Usage { position: { 16:45 to 16:51 }, name: "Option", kind: TypeIdentifier, context: None },
        Usage { position: { 17:9 to 17:40 }, name: "self.field.get(&input).copied", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 17:9 to 17:38 }, name: "copied", kind: FieldExpression, context: Some("field_expression") },
        Usage { position: { 17:9 to 17:31 }, name: "self.field.get", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 17:9 to 17:23 }, name: "get", kind: FieldExpression, context: Some("field_expression") },
        Usage { position: { 17:9 to 17:19 }, name: "field", kind: FieldExpression, context: Some("field_expression") },
        Usage { position: { 17:25 to 17:30 }, name: "input", kind: Identifier, context: Some("call_expression") },
        Usage { position: { 22:19 to 22:33 }, name: "HashMap::new", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 22:19 to 22:26 }, name: "HashMap", kind: Identifier, context: Some("scoped_identifier") },
        Usage { position: { 22:28 to 22:31 }, name: "new", kind: Identifier, context: Some("scoped_identifier") },
        Usage { position: { 23:5 to 23:39 }, name: "map.insert", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 23:5 to 23:15 }, name: "insert", kind: FieldExpression, context: Some("field_expression") },
        Usage { position: { 23:5 to 23:8 }, name: "map", kind: Identifier, context: Some("field_expression") },
        Usage { position: { 23:16 to 23:34 }, name: "\"test\".to_string", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 23:16 to 23:32 }, name: "to_string", kind: FieldExpression, context: Some("field_expression") },
        Usage { position: { 24:24 to 24:34 }, name: "Vec::new", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 24:24 to 24:27 }, name: "Vec", kind: Identifier, context: Some("scoped_identifier") },
        Usage { position: { 24:29 to 24:32 }, name: "new", kind: Identifier, context: Some("scoped_identifier") },
        Usage { position: { 25:5 to 25:21 }, name: "vec_data.push", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 25:5 to 25:18 }, name: "push", kind: FieldExpression, context: Some("field_expression") },
        Usage { position: { 25:5 to 25:13 }, name: "vec_data", kind: Identifier, context: Some("field_expression") },
        Usage { position: { 26:16 to 26:36 }, name: "TestStruct::new", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 26:16 to 26:26 }, name: "TestStruct", kind: Identifier, context: Some("scoped_identifier") },
        Usage { position: { 26:28 to 26:31 }, name: "new", kind: Identifier, context: Some("scoped_identifier") },
        Usage { position: { 26:32 to 26:35 }, name: "map", kind: Identifier, context: Some("call_expression") },
        Usage { position: { 27:18 to 27:49 }, name: "test.process", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 27:18 to 27:30 }, name: "process", kind: FieldExpression, context: Some("field_expression") },
        Usage { position: { 27:18 to 27:22 }, name: "test", kind: Identifier, context: Some("field_expression") },
        Usage { position: { 27:31 to 27:48 }, name: "\"key\".to_string", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 27:31 to 27:46 }, name: "to_string", kind: FieldExpression, context: Some("field_expression") },
    ],
    analysis_metadata: AnalysisMetadata {
        language: "Rust",
        total_lines: 28,
        analysis_timestamp: "now",
        lintric_version: "0.1.0",
    },
}
