---
source: crates/core/tests/integration/language/rust/mod.rs
expression: ir_snapshot_content
---
Source Code:
fn add(a: i32, b: i32) -> i32 {
    a + b
}
fn main() {
    let x = add(1, 2);
}

AST:
(source_file
  (function_item
    name: (identifier "add")
    parameters: (parameters
      (parameter
        pattern: (identifier "a")
        type: (primitive_type "i32")
      )
      (parameter
        pattern: (identifier "b")
        type: (primitive_type "i32")
      )
    )
    return_type: (primitive_type "i32")
    body: (block
      (binary_expression
        left: (identifier "a")
        right: (identifier "b")
      )
    )
  )
  (function_item
    name: (identifier "main")
    parameters: (parameters)
    body: (block
      (let_declaration
        pattern: (identifier "x")
        value: (call_expression
          function: (identifier "add")
          arguments: (arguments
            (integer_literal "1")
            (integer_literal "2")
          )
        )
      )
    )
  )
)

IR:
IntermediateRepresentation {
    file_path: "tests/integration/language/rust/fixtures/function_call_dependency.rs",
    definitions: [
        Definition {
            name: "add",
            position: Position {
                start_line: 1,
                start_column: 4,
                end_line: 1,
                end_column: 7,
            },
            definition_type: FunctionDefinition,
        },
        Definition {
            name: "a",
            position: Position {
                start_line: 1,
                start_column: 8,
                end_line: 1,
                end_column: 9,
            },
            definition_type: VariableDefinition,
        },
        Definition {
            name: "b",
            position: Position {
                start_line: 1,
                start_column: 16,
                end_line: 1,
                end_column: 17,
            },
            definition_type: VariableDefinition,
        },
        Definition {
            name: "main",
            position: Position {
                start_line: 4,
                start_column: 4,
                end_line: 4,
                end_column: 8,
            },
            definition_type: FunctionDefinition,
        },
        Definition {
            name: "x",
            position: Position {
                start_line: 5,
                start_column: 9,
                end_line: 5,
                end_column: 10,
            },
            definition_type: VariableDefinition,
        },
    ],
    dependencies: [
        Dependency {
            source_line: 2,
            target_line: 1,
            symbol: "a",
            dependency_type: VariableUse,
            context: Some(
                "Identifier:2:5",
            ),
        },
        Dependency {
            source_line: 2,
            target_line: 1,
            symbol: "b",
            dependency_type: VariableUse,
            context: Some(
                "Identifier:2:9",
            ),
        },
        Dependency {
            source_line: 5,
            target_line: 1,
            symbol: "add",
            dependency_type: FunctionCall,
            context: Some(
                "CallExpression:5:13",
            ),
        },
    ],
    usage: [
        Usage {
            name: "a",
            kind: Identifier,
            position: Position {
                start_line: 2,
                start_column: 5,
                end_line: 2,
                end_column: 6,
            },
            context: None,
        },
        Usage {
            name: "b",
            kind: Identifier,
            position: Position {
                start_line: 2,
                start_column: 9,
                end_line: 2,
                end_column: 10,
            },
            context: None,
        },
        Usage {
            name: "add",
            kind: CallExpression,
            position: Position {
                start_line: 5,
                start_column: 13,
                end_line: 5,
                end_column: 22,
            },
            context: Some(
                "call_expression",
            ),
        },
    ],
    analysis_metadata: AnalysisMetadata {
        language: "Rust",
        total_lines: 6,
        analysis_timestamp: "now",
        lintric_version: "0.1.0",
    },
}
