---
source: crates/core/tests/integration/language/rust/mod.rs
expression: ir_snapshot_content
---
Source Code:
fn main() {
    let y = x + 1;  // x not yet defined - should not create dependency
    let x = 42;
}

fn proper_order() {
    let x = 42;
    let y = x + 1;  // x already defined - should create dependency
}

fn block_scoping() {
    let outer = 10;
    {
        let inner = outer + 5;  // outer is accessible
    }
    // inner is not accessible here (but we don't test this case in dependency resolution)
}

fn helper() -> i32 {
    42
}

fn function_scoping() {
    let result = helper();  // helper defined before main
}

fn func_a() {
    let local_var = 10;
}

fn func_b() {
    // local_var not accessible from here, but since it's not used, no dependency should be created
    let x = 5;
}

AST:
(source_file
  (function_item
    name: (identifier "main")
    parameters: (parameters)
    body: (block
      (let_declaration
        pattern: (identifier "y")
        value: (binary_expression
          left: (identifier "x")
          right: (integer_literal "1")
        )
      )
      (line_comment)
      (let_declaration
        pattern: (identifier "x")
        value: (integer_literal "42")
      )
    )
  )
  (function_item
    name: (identifier "proper_order")
    parameters: (parameters)
    body: (block
      (let_declaration
        pattern: (identifier "x")
        value: (integer_literal "42")
      )
      (let_declaration
        pattern: (identifier "y")
        value: (binary_expression
          left: (identifier "x")
          right: (integer_literal "1")
        )
      )
      (line_comment)
    )
  )
  (function_item
    name: (identifier "block_scoping")
    parameters: (parameters)
    body: (block
      (let_declaration
        pattern: (identifier "outer")
        value: (integer_literal "10")
      )
      (expression_statement
        (block
          (let_declaration
            pattern: (identifier "inner")
            value: (binary_expression
              left: (identifier "outer")
              right: (integer_literal "5")
            )
          )
          (line_comment)
        )
      )
      (line_comment)
    )
  )
  (function_item
    name: (identifier "helper")
    parameters: (parameters)
    return_type: (primitive_type "i32")
    body: (block
      (integer_literal "42")
    )
  )
  (function_item
    name: (identifier "function_scoping")
    parameters: (parameters)
    body: (block
      (let_declaration
        pattern: (identifier "result")
        value: (call_expression
          function: (identifier "helper")
          arguments: (arguments)
        )
      )
      (line_comment)
    )
  )
  (function_item
    name: (identifier "func_a")
    parameters: (parameters)
    body: (block
      (let_declaration
        pattern: (identifier "local_var")
        value: (integer_literal "10")
      )
    )
  )
  (function_item
    name: (identifier "func_b")
    parameters: (parameters)
    body: (block
      (line_comment)
      (let_declaration
        pattern: (identifier "x")
        value: (integer_literal "5")
      )
    )
  )
)

IR:
IntermediateRepresentation {
    file_path: "tests/integration/language/rust/fixtures/forward_reference_scope.rs",
    definitions: [
        Definition { position: { 1:4 to 1:8 }, name: "main", definition_type: FunctionDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 2:9 to 2:10 }, name: "y", definition_type: VariableDefinition, scope_id: Some(2), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 3:9 to 3:10 }, name: "x", definition_type: VariableDefinition, scope_id: Some(2), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 6:4 to 6:16 }, name: "proper_order", definition_type: FunctionDefinition, scope_id: Some(3), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 7:9 to 7:10 }, name: "x", definition_type: VariableDefinition, scope_id: Some(4), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 8:9 to 8:10 }, name: "y", definition_type: VariableDefinition, scope_id: Some(4), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 11:4 to 11:17 }, name: "block_scoping", definition_type: FunctionDefinition, scope_id: Some(5), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 12:9 to 12:14 }, name: "outer", definition_type: VariableDefinition, scope_id: Some(6), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 14:13 to 14:18 }, name: "inner", definition_type: VariableDefinition, scope_id: Some(7), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 19:4 to 19:10 }, name: "helper", definition_type: FunctionDefinition, scope_id: Some(8), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 23:4 to 23:20 }, name: "function_scoping", definition_type: FunctionDefinition, scope_id: Some(10), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 24:9 to 24:15 }, name: "result", definition_type: VariableDefinition, scope_id: Some(11), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 27:4 to 27:10 }, name: "func_a", definition_type: FunctionDefinition, scope_id: Some(12), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 28:9 to 28:18 }, name: "local_var", definition_type: VariableDefinition, scope_id: Some(13), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 31:4 to 31:10 }, name: "func_b", definition_type: FunctionDefinition, scope_id: Some(14), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 33:9 to 33:10 }, name: "x", definition_type: VariableDefinition, scope_id: Some(15), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
    ],
    dependencies: [
        Dependency { source_line: 2, target_line: 3, symbol: "x", dependency_type: VariableUse, context: Some("Identifier:2:13") },
        Dependency { source_line: 8, target_line: 7, symbol: "x", dependency_type: VariableUse, context: Some("Identifier:8:13") },
        Dependency { source_line: 14, target_line: 12, symbol: "outer", dependency_type: VariableUse, context: Some("Identifier:14:21") },
        Dependency { source_line: 24, target_line: 19, symbol: "helper", dependency_type: FunctionCall, context: Some("CallExpression:24:18") },
    ],
    usage: [
        Usage { position: { 2:13 to 2:14 }, name: "x", kind: Identifier, context: None },
        Usage { position: { 8:13 to 8:14 }, name: "x", kind: Identifier, context: None },
        Usage { position: { 14:21 to 14:26 }, name: "outer", kind: Identifier, context: None },
        Usage { position: { 24:18 to 24:26 }, name: "helper", kind: CallExpression, context: Some("call_expression") },
    ],
    analysis_metadata: AnalysisMetadata {
        language: "Rust",
        total_lines: 34,
        analysis_timestamp: "now",
        lintric_version: "0.1.0",
    },
}
