---
source: crates/core/tests/integration/language/rust/mod.rs
expression: ir_snapshot_content
---
Source Code:
fn main() {
    // Function hoisting - should create dependency even though helper is defined later
    let result = helper();
    
    // Variable forward reference - should NOT create dependency
    let y = x + 1;
    let x = 42;
}

// Helper function defined after main - but should still be accessible due to hoisting
fn helper() -> i32 {
    42
}

// Test struct hoisting
fn use_struct() {
    let instance = MyStruct { field: 10 };
}

struct MyStruct {
    field: i32,
}

// Test enum hoisting  
fn use_enum() {
    let value = MyEnum::Variant1;
}

enum MyEnum {
    Variant1,
    Variant2,
}

// Test type hoisting
fn use_type() -> MyType {
    42
}

type MyType = i32;

AST:
(source_file
  (function_item
    name: (identifier "main")
    parameters: (parameters)
    body: (block
      (line_comment)
      (let_declaration
        pattern: (identifier "result")
        value: (call_expression
          function: (identifier "helper")
          arguments: (arguments)
        )
      )
      (line_comment)
      (let_declaration
        pattern: (identifier "y")
        value: (binary_expression
          left: (identifier "x")
          right: (integer_literal "1")
        )
      )
      (let_declaration
        pattern: (identifier "x")
        value: (integer_literal "42")
      )
    )
  )
  (line_comment)
  (function_item
    name: (identifier "helper")
    parameters: (parameters)
    return_type: (primitive_type "i32")
    body: (block
      (integer_literal "42")
    )
  )
  (line_comment)
  (function_item
    name: (identifier "use_struct")
    parameters: (parameters)
    body: (block
      (let_declaration
        pattern: (identifier "instance")
        value: (struct_expression
          name: (type_identifier "MyStruct")
          body: (field_initializer_list
            (field_initializer
              field: (field_identifier "field")
              value: (integer_literal "10")
            )
          )
        )
      )
    )
  )
  (struct_item
    name: (type_identifier "MyStruct")
    body: (field_declaration_list
      (field_declaration
        name: (field_identifier "field")
        type: (primitive_type "i32")
      )
    )
  )
  (line_comment)
  (function_item
    name: (identifier "use_enum")
    parameters: (parameters)
    body: (block
      (let_declaration
        pattern: (identifier "value")
        value: (scoped_identifier "MyEnum::Variant1"
          path: (identifier "MyEnum")
          name: (identifier "Variant1")
        )
      )
    )
  )
  (enum_item
    name: (type_identifier "MyEnum")
    body: (enum_variant_list
      (enum_variant
        name: (identifier "Variant1")
      )
      (enum_variant
        name: (identifier "Variant2")
      )
    )
  )
  (line_comment)
  (function_item
    name: (identifier "use_type")
    parameters: (parameters)
    return_type: (type_identifier "MyType")
    body: (block
      (integer_literal "42")
    )
  )
  (type_item
    name: (type_identifier "MyType")
    type: (primitive_type "i32")
  )
)

IR:
IntermediateRepresentation {
    file_path: "tests/integration/language/rust/fixtures/hoisting_test.rs",
    definitions: [
        Definition { position: { 1:4 to 1:8 }, name: "main", definition_type: FunctionDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 3:9 to 3:15 }, name: "result", definition_type: VariableDefinition, scope_id: Some(2), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 6:9 to 6:10 }, name: "y", definition_type: VariableDefinition, scope_id: Some(2), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 7:9 to 7:10 }, name: "x", definition_type: VariableDefinition, scope_id: Some(2), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 11:4 to 11:10 }, name: "helper", definition_type: FunctionDefinition, scope_id: Some(3), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 16:4 to 16:14 }, name: "use_struct", definition_type: FunctionDefinition, scope_id: Some(5), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 17:9 to 17:17 }, name: "instance", definition_type: VariableDefinition, scope_id: Some(6), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 20:8 to 20:16 }, name: "MyStruct", definition_type: StructDefinition, scope_id: Some(0), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 21:5 to 21:10 }, name: "field", definition_type: StructFieldDefinition, scope_id: Some(0), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 25:4 to 25:12 }, name: "use_enum", definition_type: FunctionDefinition, scope_id: Some(7), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 26:9 to 26:14 }, name: "value", definition_type: VariableDefinition, scope_id: Some(8), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 29:6 to 29:12 }, name: "MyEnum", definition_type: EnumDefinition, scope_id: Some(0), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 35:4 to 35:12 }, name: "use_type", definition_type: FunctionDefinition, scope_id: Some(9), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 39:6 to 39:12 }, name: "MyType", definition_type: TypeDefinition, scope_id: Some(0), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
    ],
    dependencies: [
        Dependency { source_line: 3, target_line: 11, symbol: "helper", dependency_type: FunctionCall, context: Some("CallExpression:3:18") },
        Dependency { source_line: 6, target_line: 7, symbol: "x", dependency_type: VariableUse, context: Some("Identifier:6:13") },
        Dependency { source_line: 17, target_line: 20, symbol: "MyStruct", dependency_type: TypeReference, context: Some("TypeIdentifier:17:20") },
        Dependency { source_line: 26, target_line: 29, symbol: "MyEnum", dependency_type: VariableUse, context: Some("Identifier:26:17") },
        Dependency { source_line: 35, target_line: 39, symbol: "MyType", dependency_type: TypeReference, context: Some("TypeIdentifier:35:18") },
    ],
    usage: [
        Usage { position: { 3:18 to 3:26 }, name: "helper", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 6:13 to 6:14 }, name: "x", kind: Identifier, context: None },
        Usage { position: { 17:20 to 17:42 }, name: "MyStruct { field: 10 }", kind: StructExpression, context: None },
        Usage { position: { 17:20 to 17:28 }, name: "MyStruct", kind: TypeIdentifier, context: None },
        Usage { position: { 26:17 to 26:23 }, name: "MyEnum", kind: Identifier, context: Some("scoped_identifier") },
        Usage { position: { 26:25 to 26:33 }, name: "Variant1", kind: Identifier, context: Some("scoped_identifier") },
        Usage { position: { 30:5 to 30:13 }, name: "Variant1", kind: Identifier, context: None },
        Usage { position: { 31:5 to 31:13 }, name: "Variant2", kind: Identifier, context: None },
        Usage { position: { 35:18 to 35:24 }, name: "MyType", kind: TypeIdentifier, context: None },
    ],
    analysis_metadata: AnalysisMetadata {
        language: "Rust",
        total_lines: 39,
        analysis_timestamp: "now",
        lintric_version: "0.1.0",
    },
}
