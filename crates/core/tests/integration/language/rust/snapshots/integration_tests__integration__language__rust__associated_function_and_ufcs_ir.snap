---
source: crates/core/tests/integration/language/rust/mod.rs
expression: ir_snapshot_content
---
Source Code:
struct MyStruct;

impl MyStruct {
    fn new() -> MyStruct {
        MyStruct
    }
}

trait MyTrait {
    fn my_function();
}

struct MyType;

impl MyTrait for MyType {
    fn my_function() {
        println!("Hello from MyType!");
    }
}

fn main() {
    let _s = MyStruct::new();
    MyType::my_function();
    <MyType as MyTrait>::my_function();
}


AST:
(source_file
  (struct_item
    name: (type_identifier "MyStruct")
  )
  (impl_item
    type: (type_identifier "MyStruct")
    body: (declaration_list
      (function_item
        name: (identifier "new")
        parameters: (parameters)
        return_type: (type_identifier "MyStruct")
        body: (block
          (identifier "MyStruct")
        )
      )
    )
  )
  (trait_item
    name: (type_identifier "MyTrait")
    body: (declaration_list
      (function_signature_item
        name: (identifier "my_function")
        parameters: (parameters)
      )
    )
  )
  (struct_item
    name: (type_identifier "MyType")
  )
  (impl_item
    trait: (type_identifier "MyTrait")
    type: (type_identifier "MyType")
    body: (declaration_list
      (function_item
        name: (identifier "my_function")
        parameters: (parameters)
        body: (block
          (expression_statement
            (macro_invocation
              macro: (identifier "println")
              (token_tree
                (string_literal ""Hello from MyType!""
                  (string_content)
                )
              )
            )
          )
        )
      )
    )
  )
  (function_item
    name: (identifier "main")
    parameters: (parameters)
    body: (block
      (let_declaration
        pattern: (identifier "_s")
        value: (call_expression
          function: (scoped_identifier "MyStruct::new"
            path: (identifier "MyStruct")
            name: (identifier "new")
          )
          arguments: (arguments)
        )
      )
      (expression_statement
        (call_expression
          function: (scoped_identifier "MyType::my_function"
            path: (identifier "MyType")
            name: (identifier "my_function")
          )
          arguments: (arguments)
        )
      )
      (expression_statement
        (call_expression
          function: (scoped_identifier "<MyType as MyTrait>::my_function"
            path: (bracketed_type
              (qualified_type
                type: (type_identifier "MyType")
                alias: (type_identifier "MyTrait")
              )
            )
            name: (identifier "my_function")
          )
          arguments: (arguments)
        )
      )
    )
  )
)

IR:
IntermediateRepresentation {
    file_path: "tests/integration/language/rust/fixtures/associated_function_and_ufcs.rs",
    definitions: [
        Definition { position: { 1:8 to 1:16 }, name: "MyStruct", definition_type: StructDefinition, scope_id: Some(0), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 4:8 to 4:11 }, name: "new", definition_type: MethodDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 9:7 to 9:14 }, name: "MyTrait", definition_type: TypeDefinition, scope_id: Some(4), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 10:8 to 10:19 }, name: "my_function", definition_type: FunctionDefinition, scope_id: Some(4), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 13:8 to 13:14 }, name: "MyType", definition_type: StructDefinition, scope_id: Some(0), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 16:8 to 16:19 }, name: "my_function", definition_type: MethodDefinition, scope_id: Some(5), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 21:4 to 21:8 }, name: "main", definition_type: FunctionDefinition, scope_id: Some(8), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 22:9 to 22:11 }, name: "_s", definition_type: VariableDefinition, scope_id: Some(9), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
    ],
    dependencies: [
        Dependency { source_line: 3, target_line: 1, symbol: "MyStruct", dependency_type: TypeReference, context: Some("TypeIdentifier:3:6") },
        Dependency { source_line: 4, target_line: 1, symbol: "MyStruct", dependency_type: TypeReference, context: Some("TypeIdentifier:4:17") },
        Dependency { source_line: 5, target_line: 1, symbol: "MyStruct", dependency_type: VariableUse, context: Some("Identifier:5:9") },
        Dependency { source_line: 15, target_line: 9, symbol: "MyTrait", dependency_type: TypeReference, context: Some("TypeIdentifier:15:6") },
        Dependency { source_line: 15, target_line: 13, symbol: "MyType", dependency_type: TypeReference, context: Some("TypeIdentifier:15:18") },
        Dependency { source_line: 22, target_line: 1, symbol: "MyStruct", dependency_type: VariableUse, context: Some("Identifier:22:14") },
        Dependency { source_line: 22, target_line: 4, symbol: "new", dependency_type: VariableUse, context: Some("Identifier:22:24") },
        Dependency { source_line: 23, target_line: 13, symbol: "MyType", dependency_type: VariableUse, context: Some("Identifier:23:5") },
        Dependency { source_line: 23, target_line: 10, symbol: "my_function", dependency_type: VariableUse, context: Some("Identifier:23:13") },
        Dependency { source_line: 24, target_line: 13, symbol: "MyType", dependency_type: TypeReference, context: Some("TypeIdentifier:24:6") },
        Dependency { source_line: 24, target_line: 9, symbol: "MyTrait", dependency_type: TypeReference, context: Some("TypeIdentifier:24:16") },
        Dependency { source_line: 24, target_line: 10, symbol: "my_function", dependency_type: VariableUse, context: Some("Identifier:24:26") },
    ],
    usage: [
        Usage { position: { 3:6 to 3:14 }, name: "MyStruct", kind: TypeIdentifier, context: None },
        Usage { position: { 4:17 to 4:25 }, name: "MyStruct", kind: TypeIdentifier, context: None },
        Usage { position: { 5:9 to 5:17 }, name: "MyStruct", kind: Identifier, context: None },
        Usage { position: { 10:8 to 10:19 }, name: "my_function", kind: Identifier, context: None },
        Usage { position: { 15:6 to 15:13 }, name: "MyTrait", kind: TypeIdentifier, context: None },
        Usage { position: { 15:18 to 15:24 }, name: "MyType", kind: TypeIdentifier, context: None },
        Usage { position: { 17:9 to 17:16 }, name: "println", kind: Identifier, context: None },
        Usage { position: { 22:14 to 22:29 }, name: "MyStruct::new", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 22:14 to 22:22 }, name: "MyStruct", kind: Identifier, context: Some("scoped_identifier") },
        Usage { position: { 22:24 to 22:27 }, name: "new", kind: Identifier, context: Some("scoped_identifier") },
        Usage { position: { 23:5 to 23:26 }, name: "MyType::my_function", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 23:5 to 23:11 }, name: "MyType", kind: Identifier, context: Some("scoped_identifier") },
        Usage { position: { 23:13 to 23:24 }, name: "my_function", kind: Identifier, context: Some("scoped_identifier") },
        Usage { position: { 24:5 to 24:39 }, name: "<MyType as MyTrait>::my_function", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 24:6 to 24:12 }, name: "MyType", kind: TypeIdentifier, context: Some("scoped_identifier") },
        Usage { position: { 24:16 to 24:23 }, name: "MyTrait", kind: TypeIdentifier, context: Some("scoped_identifier") },
        Usage { position: { 24:26 to 24:37 }, name: "my_function", kind: Identifier, context: Some("scoped_identifier") },
    ],
    analysis_metadata: AnalysisMetadata {
        language: "Rust",
        total_lines: 25,
        analysis_timestamp: "now",
        lintric_version: "0.1.0",
    },
}
