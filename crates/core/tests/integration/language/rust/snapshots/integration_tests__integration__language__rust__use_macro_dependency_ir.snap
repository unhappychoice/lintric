---
source: crates/core/tests/integration/language/rust/mod.rs
expression: ir_snapshot_content
---
Source Code:
fn main() {
    use my_module::some_macro;
    some_macro!("use macro");
}


AST:
(source_file
  (function_item
    name: (identifier "main")
    parameters: (parameters)
    body: (block
      (use_declaration
        argument: (scoped_identifier "my_module::some_macro"
          path: (identifier "my_module")
          name: (identifier "some_macro")
        )
      )
      (expression_statement
        (macro_invocation
          macro: (identifier "some_macro")
          (token_tree
            (string_literal ""use macro""
              (string_content)
            )
          )
        )
      )
    )
  )
)

IR:
IntermediateRepresentation {
    file_path: "tests/integration/language/rust/fixtures/use_macro_dependency.rs",
    definitions: [
        Definition { position: { 1:4 to 1:8 }, name: "main", definition_type: FunctionDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 2:20 to 2:30 }, name: "some_macro", definition_type: ImportDefinition, scope_id: Some(2), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
    ],
    dependencies: [
        Dependency { source_line: 3, target_line: 2, symbol: "some_macro", dependency_type: VariableUse, context: Some("Identifier:3:5") },
    ],
    usage: [
        Usage { position: { 2:9 to 2:18 }, name: "my_module", kind: TypeIdentifier, context: Some("scoped_identifier") },
        Usage { position: { 2:20 to 2:30 }, name: "some_macro", kind: TypeIdentifier, context: Some("scoped_identifier") },
        Usage { position: { 3:5 to 3:15 }, name: "some_macro", kind: Identifier, context: None },
    ],
    analysis_metadata: AnalysisMetadata {
        language: "Rust",
        total_lines: 4,
        analysis_timestamp: "now",
        lintric_version: "0.1.0",
    },
}
