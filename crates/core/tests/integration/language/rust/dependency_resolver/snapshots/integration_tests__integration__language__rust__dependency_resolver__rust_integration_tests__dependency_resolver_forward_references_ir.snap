---
source: crates/core/tests/integration/language/rust/dependency_resolver/rust_integration_tests.rs
expression: ir_snapshot_content
---
Source Code:
fn main() {
    helper();
    
    let result = is_even(4);
    println!("{}", result);
}

fn helper() {
    println!("Helper function");
}

fn is_even(n: i32) -> bool {
    if n == 0 {
        true
    } else {
        is_odd(n - 1)
    }
}

fn is_odd(n: i32) -> bool {
    if n == 0 {
        false
    } else {
        is_even(n - 1)
    }
}

AST:
(source_file
  (function_item
    name: (identifier "main")
    parameters: (parameters)
    body: (block
      (expression_statement
        (call_expression
          function: (identifier "helper")
          arguments: (arguments)
        )
      )
      (let_declaration
        pattern: (identifier "result")
        value: (call_expression
          function: (identifier "is_even")
          arguments: (arguments
            (integer_literal "4")
          )
        )
      )
      (expression_statement
        (macro_invocation
          macro: (identifier "println")
          (token_tree
            (string_literal ""{}""
              (string_content)
            )
            (identifier "result")
          )
        )
      )
    )
  )
  (function_item
    name: (identifier "helper")
    parameters: (parameters)
    body: (block
      (expression_statement
        (macro_invocation
          macro: (identifier "println")
          (token_tree
            (string_literal ""Helper function""
              (string_content)
            )
          )
        )
      )
    )
  )
  (function_item
    name: (identifier "is_even")
    parameters: (parameters
      (parameter
        pattern: (identifier "n")
        type: (primitive_type "i32")
      )
    )
    return_type: (primitive_type "bool")
    body: (block
      (expression_statement
        (if_expression
          condition: (binary_expression
            left: (identifier "n")
            right: (integer_literal "0")
          )
          consequence: (block
            (boolean_literal "true")
          )
          alternative: (else_clause
            (block
              (call_expression
                function: (identifier "is_odd")
                arguments: (arguments
                  (binary_expression
                    left: (identifier "n")
                    right: (integer_literal "1")
                  )
                )
              )
            )
          )
        )
      )
    )
  )
  (function_item
    name: (identifier "is_odd")
    parameters: (parameters
      (parameter
        pattern: (identifier "n")
        type: (primitive_type "i32")
      )
    )
    return_type: (primitive_type "bool")
    body: (block
      (expression_statement
        (if_expression
          condition: (binary_expression
            left: (identifier "n")
            right: (integer_literal "0")
          )
          consequence: (block
            (boolean_literal "false")
          )
          alternative: (else_clause
            (block
              (call_expression
                function: (identifier "is_even")
                arguments: (arguments
                  (binary_expression
                    left: (identifier "n")
                    right: (integer_literal "1")
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

IR:
IntermediateRepresentation {
    file_path: "tests/integration/language/rust/dependency_resolver/fixtures/forward_references.rs",
    definitions: [
        Definition { position: { 1:4 to 1:8 }, name: "main", definition_type: FunctionDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 4:9 to 4:15 }, name: "result", definition_type: VariableDefinition, scope_id: Some(2), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 8:4 to 8:10 }, name: "helper", definition_type: FunctionDefinition, scope_id: Some(3), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 12:4 to 12:11 }, name: "is_even", definition_type: FunctionDefinition, scope_id: Some(5), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 12:12 to 12:13 }, name: "n", definition_type: VariableDefinition, scope_id: Some(5), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 20:4 to 20:10 }, name: "is_odd", definition_type: FunctionDefinition, scope_id: Some(10), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 20:11 to 20:12 }, name: "n", definition_type: VariableDefinition, scope_id: Some(10), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
    ],
    dependencies: [
        Dependency { source_line: 2, target_line: 8, symbol: "helper", dependency_type: FunctionCall, context: Some("CallExpression:2:5") },
        Dependency { source_line: 4, target_line: 12, symbol: "is_even", dependency_type: FunctionCall, context: Some("CallExpression:4:18") },
        Dependency { source_line: 5, target_line: 4, symbol: "result", dependency_type: VariableUse, context: Some("Identifier:5:20") },
        Dependency { source_line: 13, target_line: 12, symbol: "n", dependency_type: VariableUse, context: Some("Identifier:13:8") },
        Dependency { source_line: 16, target_line: 20, symbol: "is_odd", dependency_type: FunctionCall, context: Some("CallExpression:16:9") },
        Dependency { source_line: 16, target_line: 12, symbol: "n", dependency_type: VariableUse, context: Some("Identifier:16:16") },
        Dependency { source_line: 21, target_line: 20, symbol: "n", dependency_type: VariableUse, context: Some("Identifier:21:8") },
        Dependency { source_line: 24, target_line: 12, symbol: "is_even", dependency_type: FunctionCall, context: Some("CallExpression:24:9") },
        Dependency { source_line: 24, target_line: 20, symbol: "n", dependency_type: VariableUse, context: Some("Identifier:24:17") },
    ],
    usage: [
        Usage { position: { 2:5 to 2:13 }, name: "helper", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 4:18 to 4:28 }, name: "is_even", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 5:5 to 5:12 }, name: "println", kind: Identifier, context: None },
        Usage { position: { 5:20 to 5:26 }, name: "result", kind: Identifier, context: None },
        Usage { position: { 9:5 to 9:12 }, name: "println", kind: Identifier, context: None },
        Usage { position: { 13:8 to 13:9 }, name: "n", kind: Identifier, context: None },
        Usage { position: { 16:9 to 16:22 }, name: "is_odd", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 16:16 to 16:17 }, name: "n", kind: Identifier, context: Some("call_expression") },
        Usage { position: { 21:8 to 21:9 }, name: "n", kind: Identifier, context: None },
        Usage { position: { 24:9 to 24:23 }, name: "is_even", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 24:17 to 24:18 }, name: "n", kind: Identifier, context: Some("call_expression") },
    ],
    analysis_metadata: AnalysisMetadata {
        language: "Rust",
        total_lines: 26,
        analysis_timestamp: "now",
        lintric_version: "0.1.0",
    },
}
