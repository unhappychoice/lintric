---
source: crates/core/tests/integration/language/rust/dependency_resolver/rust_integration_tests.rs
expression: ir_snapshot_content
---
Source Code:
struct Calculator {
    value: i32,
}

impl Calculator {
    fn new() -> Self {
        Calculator { value: 0 }
    }
    
    fn add(&mut self, n: i32) {
        self.value += n;
    }
    
    fn get_value(&self) -> i32 {
        self.value
    }
}

trait Display {
    fn display(&self) -> String;
}

impl Display for Calculator {
    fn display(&self) -> String {
        format!("Calculator({})", self.value)
    }
}

fn main() {
    let mut calc = Calculator::new();
    calc.add(5);
    println!("{}", calc.get_value());
    println!("{}", calc.display());
}

AST:
(source_file
  (struct_item
    name: (type_identifier "Calculator")
    body: (field_declaration_list
      (field_declaration
        name: (field_identifier "value")
        type: (primitive_type "i32")
      )
    )
  )
  (impl_item
    type: (type_identifier "Calculator")
    body: (declaration_list
      (function_item
        name: (identifier "new")
        parameters: (parameters)
        return_type: (type_identifier "Self")
        body: (block
          (struct_expression
            name: (type_identifier "Calculator")
            body: (field_initializer_list
              (field_initializer
                field: (field_identifier "value")
                value: (integer_literal "0")
              )
            )
          )
        )
      )
      (function_item
        name: (identifier "add")
        parameters: (parameters
          (self_parameter
            (mutable_specifier)
            (self "self")
          )
          (parameter
            pattern: (identifier "n")
            type: (primitive_type "i32")
          )
        )
        body: (block
          (expression_statement
            (compound_assignment_expr
              left: (field_expression
                value: (self "self")
                field: (field_identifier "value")
              )
              right: (identifier "n")
            )
          )
        )
      )
      (function_item
        name: (identifier "get_value")
        parameters: (parameters
          (self_parameter
            (self "self")
          )
        )
        return_type: (primitive_type "i32")
        body: (block
          (field_expression
            value: (self "self")
            field: (field_identifier "value")
          )
        )
      )
    )
  )
  (trait_item
    name: (type_identifier "Display")
    body: (declaration_list
      (function_signature_item
        name: (identifier "display")
        parameters: (parameters
          (self_parameter
            (self "self")
          )
        )
        return_type: (type_identifier "String")
      )
    )
  )
  (impl_item
    trait: (type_identifier "Display")
    type: (type_identifier "Calculator")
    body: (declaration_list
      (function_item
        name: (identifier "display")
        parameters: (parameters
          (self_parameter
            (self "self")
          )
        )
        return_type: (type_identifier "String")
        body: (block
          (macro_invocation
            macro: (identifier "format")
            (token_tree
              (string_literal ""Calculator({})""
                (string_content)
              )
              (self "self")
              (identifier "value")
            )
          )
        )
      )
    )
  )
  (function_item
    name: (identifier "main")
    parameters: (parameters)
    body: (block
      (let_declaration
        (mutable_specifier)
        pattern: (identifier "calc")
        value: (call_expression
          function: (scoped_identifier "Calculator::new"
            path: (identifier "Calculator")
            name: (identifier "new")
          )
          arguments: (arguments)
        )
      )
      (expression_statement
        (call_expression
          function: (field_expression
            value: (identifier "calc")
            field: (field_identifier "add")
          )
          arguments: (arguments
            (integer_literal "5")
          )
        )
      )
      (expression_statement
        (macro_invocation
          macro: (identifier "println")
          (token_tree
            (string_literal ""{}""
              (string_content)
            )
            (identifier "calc")
            (identifier "get_value")
            (token_tree)
          )
        )
      )
      (expression_statement
        (macro_invocation
          macro: (identifier "println")
          (token_tree
            (string_literal ""{}""
              (string_content)
            )
            (identifier "calc")
            (identifier "display")
            (token_tree)
          )
        )
      )
    )
  )
)

IR:
IntermediateRepresentation {
    file_path: "tests/integration/language/rust/dependency_resolver/fixtures/method_resolution.rs",
    definitions: [
        Definition { position: { 1:8 to 1:18 }, name: "Calculator", definition_type: StructDefinition, scope_id: Some(0), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 2:5 to 2:10 }, name: "value", definition_type: StructFieldDefinition, scope_id: Some(0), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 6:8 to 6:11 }, name: "new", definition_type: MethodDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 10:8 to 10:11 }, name: "add", definition_type: MethodDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 10:23 to 10:24 }, name: "n", definition_type: VariableDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 14:8 to 14:17 }, name: "get_value", definition_type: MethodDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 19:7 to 19:14 }, name: "Display", definition_type: TypeDefinition, scope_id: Some(8), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 20:8 to 20:15 }, name: "display", definition_type: FunctionDefinition, scope_id: Some(8), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 24:8 to 24:15 }, name: "display", definition_type: MethodDefinition, scope_id: Some(9), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 29:4 to 29:8 }, name: "main", definition_type: FunctionDefinition, scope_id: Some(12), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 30:13 to 30:17 }, name: "calc", definition_type: VariableDefinition, scope_id: Some(13), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
    ],
    dependencies: [
        Dependency { source_line: 5, target_line: 1, symbol: "Calculator", dependency_type: TypeReference, context: Some("TypeIdentifier:5:6") },
        Dependency { source_line: 7, target_line: 1, symbol: "Calculator", dependency_type: TypeReference, context: Some("TypeIdentifier:7:9") },
        Dependency { source_line: 11, target_line: 2, symbol: "value", dependency_type: StructFieldAccess, context: Some("FieldExpression:11:9") },
        Dependency { source_line: 11, target_line: 10, symbol: "n", dependency_type: VariableUse, context: Some("Identifier:11:23") },
        Dependency { source_line: 15, target_line: 2, symbol: "value", dependency_type: StructFieldAccess, context: Some("FieldExpression:15:9") },
        Dependency { source_line: 23, target_line: 19, symbol: "Display", dependency_type: TypeReference, context: Some("TypeIdentifier:23:6") },
        Dependency { source_line: 23, target_line: 1, symbol: "Calculator", dependency_type: TypeReference, context: Some("TypeIdentifier:23:18") },
        Dependency { source_line: 25, target_line: 2, symbol: "value", dependency_type: StructFieldAccess, context: Some("FieldExpression:25:40") },
        Dependency { source_line: 30, target_line: 1, symbol: "Calculator", dependency_type: VariableUse, context: Some("Identifier:30:20") },
        Dependency { source_line: 30, target_line: 6, symbol: "new", dependency_type: VariableUse, context: Some("Identifier:30:32") },
        Dependency { source_line: 31, target_line: 10, symbol: "add", dependency_type: StructFieldAccess, context: Some("FieldExpression:31:5") },
        Dependency { source_line: 31, target_line: 30, symbol: "calc", dependency_type: VariableUse, context: Some("Identifier:31:5") },
        Dependency { source_line: 32, target_line: 30, symbol: "calc", dependency_type: VariableUse, context: Some("Identifier:32:20") },
        Dependency { source_line: 32, target_line: 14, symbol: "get_value", dependency_type: StructFieldAccess, context: Some("FieldExpression:32:25") },
        Dependency { source_line: 33, target_line: 30, symbol: "calc", dependency_type: VariableUse, context: Some("Identifier:33:20") },
        Dependency { source_line: 33, target_line: 24, symbol: "display", dependency_type: StructFieldAccess, context: Some("FieldExpression:33:25") },
    ],
    usage: [
        Usage { position: { 5:6 to 5:16 }, name: "Calculator", kind: TypeIdentifier, context: None },
        Usage { position: { 6:17 to 6:21 }, name: "Self", kind: TypeIdentifier, context: None },
        Usage { position: { 7:9 to 7:32 }, name: "Calculator { value: 0 }", kind: StructExpression, context: None },
        Usage { position: { 7:9 to 7:19 }, name: "Calculator", kind: TypeIdentifier, context: None },
        Usage { position: { 11:9 to 11:19 }, name: "value", kind: FieldExpression, context: Some("field_expression") },
        Usage { position: { 11:23 to 11:24 }, name: "n", kind: Identifier, context: None },
        Usage { position: { 15:9 to 15:19 }, name: "value", kind: FieldExpression, context: Some("field_expression") },
        Usage { position: { 20:8 to 20:15 }, name: "display", kind: Identifier, context: None },
        Usage { position: { 20:26 to 20:32 }, name: "String", kind: TypeIdentifier, context: None },
        Usage { position: { 23:6 to 23:13 }, name: "Display", kind: TypeIdentifier, context: None },
        Usage { position: { 23:18 to 23:28 }, name: "Calculator", kind: TypeIdentifier, context: None },
        Usage { position: { 24:26 to 24:32 }, name: "String", kind: TypeIdentifier, context: None },
        Usage { position: { 25:9 to 25:15 }, name: "format", kind: Identifier, context: None },
        Usage { position: { 25:40 to 25:45 }, name: "value", kind: FieldExpression, context: None },
        Usage { position: { 30:20 to 30:37 }, name: "Calculator::new", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 30:20 to 30:30 }, name: "Calculator", kind: Identifier, context: Some("scoped_identifier") },
        Usage { position: { 30:32 to 30:35 }, name: "new", kind: Identifier, context: Some("scoped_identifier") },
        Usage { position: { 31:5 to 31:16 }, name: "calc.add", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 31:5 to 31:13 }, name: "add", kind: FieldExpression, context: Some("field_expression") },
        Usage { position: { 31:5 to 31:9 }, name: "calc", kind: Identifier, context: Some("field_expression") },
        Usage { position: { 32:5 to 32:12 }, name: "println", kind: Identifier, context: None },
        Usage { position: { 32:20 to 32:24 }, name: "calc", kind: Identifier, context: None },
        Usage { position: { 32:25 to 32:34 }, name: "get_value", kind: FieldExpression, context: None },
        Usage { position: { 33:5 to 33:12 }, name: "println", kind: Identifier, context: None },
        Usage { position: { 33:20 to 33:24 }, name: "calc", kind: Identifier, context: None },
        Usage { position: { 33:25 to 33:32 }, name: "display", kind: FieldExpression, context: None },
    ],
    analysis_metadata: AnalysisMetadata {
        language: "Rust",
        total_lines: 34,
        analysis_timestamp: "now",
        lintric_version: "0.1.0",
    },
}
