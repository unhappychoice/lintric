---
source: crates/core/tests/integration/language/rust/dependency_resolver/rust_integration_tests.rs
expression: ir_snapshot_content
---
Source Code:
fn outer() {
    let outer_var = 42;
    
    fn inner() {
        println!("{}", outer_var);
    }
    
    {
        let block_var = 20;
        println!("{} {}", outer_var, block_var);
    }
    
    inner();
}

fn main() {
    let x = 10;
    
    {
        let y = 20;
        println!("{} {}", x, y);
    }
    
    println!("{}", x);
}

AST:
(source_file
  (function_item
    name: (identifier "outer")
    parameters: (parameters)
    body: (block
      (let_declaration
        pattern: (identifier "outer_var")
        value: (integer_literal "42")
      )
      (function_item
        name: (identifier "inner")
        parameters: (parameters)
        body: (block
          (expression_statement
            (macro_invocation
              macro: (identifier "println")
              (token_tree
                (string_literal ""{}""
                  (string_content)
                )
                (identifier "outer_var")
              )
            )
          )
        )
      )
      (expression_statement
        (block
          (let_declaration
            pattern: (identifier "block_var")
            value: (integer_literal "20")
          )
          (expression_statement
            (macro_invocation
              macro: (identifier "println")
              (token_tree
                (string_literal ""{} {}""
                  (string_content)
                )
                (identifier "outer_var")
                (identifier "block_var")
              )
            )
          )
        )
      )
      (expression_statement
        (call_expression
          function: (identifier "inner")
          arguments: (arguments)
        )
      )
    )
  )
  (function_item
    name: (identifier "main")
    parameters: (parameters)
    body: (block
      (let_declaration
        pattern: (identifier "x")
        value: (integer_literal "10")
      )
      (expression_statement
        (block
          (let_declaration
            pattern: (identifier "y")
            value: (integer_literal "20")
          )
          (expression_statement
            (macro_invocation
              macro: (identifier "println")
              (token_tree
                (string_literal ""{} {}""
                  (string_content)
                )
                (identifier "x")
                (identifier "y")
              )
            )
          )
        )
      )
      (expression_statement
        (macro_invocation
          macro: (identifier "println")
          (token_tree
            (string_literal ""{}""
              (string_content)
            )
            (identifier "x")
          )
        )
      )
    )
  )
)

IR:
IntermediateRepresentation {
    file_path: "tests/integration/language/rust/dependency_resolver/fixtures/scope_resolution.rs",
    definitions: [
        Definition { position: { 1:4 to 1:9 }, name: "outer", definition_type: FunctionDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 2:9 to 2:18 }, name: "outer_var", definition_type: VariableDefinition, scope_id: Some(2), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 4:8 to 4:13 }, name: "inner", definition_type: FunctionDefinition, scope_id: Some(3), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 9:13 to 9:22 }, name: "block_var", definition_type: VariableDefinition, scope_id: Some(5), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 16:4 to 16:8 }, name: "main", definition_type: FunctionDefinition, scope_id: Some(6), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 17:9 to 17:10 }, name: "x", definition_type: VariableDefinition, scope_id: Some(7), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 20:13 to 20:14 }, name: "y", definition_type: VariableDefinition, scope_id: Some(8), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
    ],
    dependencies: [
        Dependency { source_line: 10, target_line: 2, symbol: "outer_var", dependency_type: VariableUse, context: Some("Identifier:10:27") },
        Dependency { source_line: 10, target_line: 9, symbol: "block_var", dependency_type: VariableUse, context: Some("Identifier:10:38") },
        Dependency { source_line: 13, target_line: 4, symbol: "inner", dependency_type: FunctionCall, context: Some("CallExpression:13:5") },
        Dependency { source_line: 21, target_line: 17, symbol: "x", dependency_type: VariableUse, context: Some("Identifier:21:27") },
        Dependency { source_line: 21, target_line: 20, symbol: "y", dependency_type: VariableUse, context: Some("Identifier:21:30") },
        Dependency { source_line: 24, target_line: 17, symbol: "x", dependency_type: VariableUse, context: Some("Identifier:24:20") },
    ],
    usage: [
        Usage { position: { 5:9 to 5:16 }, name: "println", kind: Identifier, context: None },
        Usage { position: { 5:24 to 5:33 }, name: "outer_var", kind: Identifier, context: None },
        Usage { position: { 10:9 to 10:16 }, name: "println", kind: Identifier, context: None },
        Usage { position: { 10:27 to 10:36 }, name: "outer_var", kind: Identifier, context: None },
        Usage { position: { 10:38 to 10:47 }, name: "block_var", kind: Identifier, context: None },
        Usage { position: { 13:5 to 13:12 }, name: "inner", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 21:9 to 21:16 }, name: "println", kind: Identifier, context: None },
        Usage { position: { 21:27 to 21:28 }, name: "x", kind: Identifier, context: None },
        Usage { position: { 21:30 to 21:31 }, name: "y", kind: Identifier, context: None },
        Usage { position: { 24:5 to 24:12 }, name: "println", kind: Identifier, context: None },
        Usage { position: { 24:20 to 24:21 }, name: "x", kind: Identifier, context: None },
    ],
    analysis_metadata: AnalysisMetadata {
        language: "Rust",
        total_lines: 25,
        analysis_timestamp: "now",
        lintric_version: "0.1.0",
    },
}
