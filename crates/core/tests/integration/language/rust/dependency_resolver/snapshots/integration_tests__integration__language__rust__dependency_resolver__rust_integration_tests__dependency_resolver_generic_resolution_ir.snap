---
source: crates/core/tests/integration/language/rust/dependency_resolver/rust_integration_tests.rs
expression: ir_snapshot_content
---
Source Code:
struct Container<T> {
    item: T,
}

impl<T> Container<T> {
    fn new(item: T) -> Self {
        Container { item }
    }
    
    fn get(&self) -> &T {
        &self.item
    }
}

fn process<T: Clone>(container: &Container<T>) -> T {
    container.get().clone()
}

fn main() {
    let container = Container::new(42);
    let value = process(&container);
    println!("{}", value);
}

AST:
(source_file
  (struct_item
    name: (type_identifier "Container")
    type_parameters: (type_parameters
      (type_identifier "T")
    )
    body: (field_declaration_list
      (field_declaration
        name: (field_identifier "item")
        type: (type_identifier "T")
      )
    )
  )
  (impl_item
    type_parameters: (type_parameters
      (type_identifier "T")
    )
    type: (generic_type
      type: (type_identifier "Container")
      type_arguments: (type_arguments
        (type_identifier "T")
      )
    )
    body: (declaration_list
      (function_item
        name: (identifier "new")
        parameters: (parameters
          (parameter
            pattern: (identifier "item")
            type: (type_identifier "T")
          )
        )
        return_type: (type_identifier "Self")
        body: (block
          (struct_expression
            name: (type_identifier "Container")
            body: (field_initializer_list
              (shorthand_field_initializer
                (identifier "item")
              )
            )
          )
        )
      )
      (function_item
        name: (identifier "get")
        parameters: (parameters
          (self_parameter
            (self "self")
          )
        )
        return_type: (reference_type
          type: (type_identifier "T")
        )
        body: (block
          (reference_expression
            value: (field_expression
              value: (self "self")
              field: (field_identifier "item")
            )
          )
        )
      )
    )
  )
  (function_item
    name: (identifier "process")
    type_parameters: (type_parameters
      (constrained_type_parameter
        left: (type_identifier "T")
        bounds: (trait_bounds
          (type_identifier "Clone")
        )
      )
    )
    parameters: (parameters
      (parameter
        pattern: (identifier "container")
        type: (reference_type
          type: (generic_type
            type: (type_identifier "Container")
            type_arguments: (type_arguments
              (type_identifier "T")
            )
          )
        )
      )
    )
    return_type: (type_identifier "T")
    body: (block
      (call_expression
        function: (field_expression
          value: (call_expression
            function: (field_expression
              value: (identifier "container")
              field: (field_identifier "get")
            )
            arguments: (arguments)
          )
          field: (field_identifier "clone")
        )
        arguments: (arguments)
      )
    )
  )
  (function_item
    name: (identifier "main")
    parameters: (parameters)
    body: (block
      (let_declaration
        pattern: (identifier "container")
        value: (call_expression
          function: (scoped_identifier "Container::new"
            path: (identifier "Container")
            name: (identifier "new")
          )
          arguments: (arguments
            (integer_literal "42")
          )
        )
      )
      (let_declaration
        pattern: (identifier "value")
        value: (call_expression
          function: (identifier "process")
          arguments: (arguments
            (reference_expression
              value: (identifier "container")
            )
          )
        )
      )
      (expression_statement
        (macro_invocation
          macro: (identifier "println")
          (token_tree
            (string_literal ""{}""
              (string_content)
            )
            (identifier "value")
          )
        )
      )
    )
  )
)

IR:
IntermediateRepresentation {
    file_path: "tests/integration/language/rust/dependency_resolver/fixtures/generic_resolution.rs",
    definitions: [
        Definition { position: { 1:8 to 1:17 }, name: "Container", definition_type: StructDefinition, scope_id: Some(0), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 1:18 to 1:19 }, name: "T", definition_type: TypeDefinition, scope_id: Some(0), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 2:5 to 2:9 }, name: "item", definition_type: StructFieldDefinition, scope_id: Some(0), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 6:8 to 6:11 }, name: "new", definition_type: MethodDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 6:12 to 6:16 }, name: "item", definition_type: VariableDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 10:8 to 10:11 }, name: "get", definition_type: MethodDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 15:4 to 15:11 }, name: "process", definition_type: FunctionDefinition, scope_id: Some(6), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 15:12 to 15:13 }, name: "T", definition_type: TypeDefinition, scope_id: Some(6), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 15:22 to 15:31 }, name: "container", definition_type: VariableDefinition, scope_id: Some(6), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 19:4 to 19:8 }, name: "main", definition_type: FunctionDefinition, scope_id: Some(8), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 20:9 to 20:18 }, name: "container", definition_type: VariableDefinition, scope_id: Some(9), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 21:9 to 21:14 }, name: "value", definition_type: VariableDefinition, scope_id: Some(9), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
    ],
    dependencies: [
        Dependency { source_line: 2, target_line: 1, symbol: "T", dependency_type: TypeReference, context: Some("TypeIdentifier:2:11") },
        Dependency { source_line: 5, target_line: 1, symbol: "Container", dependency_type: TypeReference, context: Some("TypeIdentifier:5:9") },
        Dependency { source_line: 5, target_line: 1, symbol: "T", dependency_type: TypeReference, context: Some("TypeIdentifier:5:19") },
        Dependency { source_line: 6, target_line: 1, symbol: "T", dependency_type: TypeReference, context: Some("TypeIdentifier:6:18") },
        Dependency { source_line: 7, target_line: 1, symbol: "Container", dependency_type: TypeReference, context: Some("TypeIdentifier:7:9") },
        Dependency { source_line: 7, target_line: 6, symbol: "item", dependency_type: VariableUse, context: Some("Identifier:7:21") },
        Dependency { source_line: 10, target_line: 1, symbol: "T", dependency_type: TypeReference, context: Some("TypeIdentifier:10:23") },
        Dependency { source_line: 11, target_line: 2, symbol: "item", dependency_type: StructFieldAccess, context: Some("FieldExpression:11:10") },
        Dependency { source_line: 15, target_line: 1, symbol: "Container", dependency_type: TypeReference, context: Some("TypeIdentifier:15:34") },
        Dependency { source_line: 15, target_line: 1, symbol: "T", dependency_type: TypeReference, context: Some("TypeIdentifier:15:44") },
        Dependency { source_line: 15, target_line: 1, symbol: "T", dependency_type: TypeReference, context: Some("TypeIdentifier:15:51") },
        Dependency { source_line: 16, target_line: 10, symbol: "get", dependency_type: StructFieldAccess, context: Some("FieldExpression:16:5") },
        Dependency { source_line: 16, target_line: 15, symbol: "container", dependency_type: VariableUse, context: Some("Identifier:16:5") },
        Dependency { source_line: 20, target_line: 1, symbol: "Container", dependency_type: VariableUse, context: Some("Identifier:20:21") },
        Dependency { source_line: 20, target_line: 6, symbol: "new", dependency_type: VariableUse, context: Some("Identifier:20:32") },
        Dependency { source_line: 21, target_line: 15, symbol: "process", dependency_type: FunctionCall, context: Some("CallExpression:21:17") },
        Dependency { source_line: 21, target_line: 20, symbol: "container", dependency_type: VariableUse, context: Some("Identifier:21:26") },
        Dependency { source_line: 22, target_line: 21, symbol: "value", dependency_type: VariableUse, context: Some("Identifier:22:20") },
    ],
    usage: [
        Usage { position: { 2:11 to 2:12 }, name: "T", kind: TypeIdentifier, context: None },
        Usage { position: { 5:9 to 5:18 }, name: "Container", kind: TypeIdentifier, context: None },
        Usage { position: { 5:19 to 5:20 }, name: "T", kind: TypeIdentifier, context: None },
        Usage { position: { 6:18 to 6:19 }, name: "T", kind: TypeIdentifier, context: None },
        Usage { position: { 6:24 to 6:28 }, name: "Self", kind: TypeIdentifier, context: None },
        Usage { position: { 7:9 to 7:27 }, name: "Container { item }", kind: StructExpression, context: None },
        Usage { position: { 7:9 to 7:18 }, name: "Container", kind: TypeIdentifier, context: None },
        Usage { position: { 7:21 to 7:25 }, name: "item", kind: Identifier, context: None },
        Usage { position: { 10:23 to 10:24 }, name: "T", kind: TypeIdentifier, context: None },
        Usage { position: { 11:10 to 11:19 }, name: "item", kind: FieldExpression, context: Some("field_expression") },
        Usage { position: { 15:34 to 15:43 }, name: "Container", kind: TypeIdentifier, context: None },
        Usage { position: { 15:44 to 15:45 }, name: "T", kind: TypeIdentifier, context: None },
        Usage { position: { 15:51 to 15:52 }, name: "T", kind: TypeIdentifier, context: None },
        Usage { position: { 16:5 to 16:28 }, name: "container.get().clone", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 16:5 to 16:26 }, name: "clone", kind: FieldExpression, context: Some("field_expression") },
        Usage { position: { 16:5 to 16:20 }, name: "container.get", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 16:5 to 16:18 }, name: "get", kind: FieldExpression, context: Some("field_expression") },
        Usage { position: { 16:5 to 16:14 }, name: "container", kind: Identifier, context: Some("field_expression") },
        Usage { position: { 20:21 to 20:39 }, name: "Container::new", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 20:21 to 20:30 }, name: "Container", kind: Identifier, context: Some("scoped_identifier") },
        Usage { position: { 20:32 to 20:35 }, name: "new", kind: Identifier, context: Some("scoped_identifier") },
        Usage { position: { 21:17 to 21:36 }, name: "process", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 21:26 to 21:35 }, name: "container", kind: Identifier, context: Some("call_expression") },
        Usage { position: { 22:5 to 22:12 }, name: "println", kind: Identifier, context: None },
        Usage { position: { 22:20 to 22:25 }, name: "value", kind: Identifier, context: None },
    ],
    analysis_metadata: AnalysisMetadata {
        language: "Rust",
        total_lines: 23,
        analysis_timestamp: "now",
        lintric_version: "0.1.0",
    },
}
