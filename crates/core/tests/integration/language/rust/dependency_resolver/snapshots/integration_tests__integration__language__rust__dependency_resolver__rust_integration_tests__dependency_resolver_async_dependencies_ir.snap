---
source: crates/core/tests/integration/language/rust/dependency_resolver/rust_integration_tests.rs
expression: ir_snapshot_content
---
Source Code:
use std::future::Future;

async fn fetch_data() -> Result<String, String> {
    Ok("data".to_string())
}

async fn process_data() -> Result<(), String> {
    let data = fetch_data().await?;
    println!("Processed: {}", data);
    Ok(())
}

fn spawn_task<F: Future<Output = ()>>(future: F) {
    // Simulate spawning async task
    std::hint::black_box(future);
}

async fn main() {
    let _ = process_data().await;
    
    spawn_task(async {
        let data = fetch_data().await.unwrap();
        println!("In spawn: {}", data);
    });
}

AST:
(source_file
  (use_declaration
    argument: (scoped_identifier "std::future::Future"
      path: (scoped_identifier "std::future"
        path: (identifier "std")
        name: (identifier "future")
      )
      name: (identifier "Future")
    )
  )
  (function_item
    (function_modifiers)
    name: (identifier "fetch_data")
    parameters: (parameters)
    return_type: (generic_type
      type: (type_identifier "Result")
      type_arguments: (type_arguments
        (type_identifier "String")
        (type_identifier "String")
      )
    )
    body: (block
      (call_expression
        function: (identifier "Ok")
        arguments: (arguments
          (call_expression
            function: (field_expression
              value: (string_literal ""data""
                (string_content)
              )
              field: (field_identifier "to_string")
            )
            arguments: (arguments)
          )
        )
      )
    )
  )
  (function_item
    (function_modifiers)
    name: (identifier "process_data")
    parameters: (parameters)
    return_type: (generic_type
      type: (type_identifier "Result")
      type_arguments: (type_arguments
        (unit_type)
        (type_identifier "String")
      )
    )
    body: (block
      (let_declaration
        pattern: (identifier "data")
        value: (try_expression
          (await_expression
            (call_expression
              function: (identifier "fetch_data")
              arguments: (arguments)
            )
          )
        )
      )
      (expression_statement
        (macro_invocation
          macro: (identifier "println")
          (token_tree
            (string_literal ""Processed: {}""
              (string_content)
            )
            (identifier "data")
          )
        )
      )
      (call_expression
        function: (identifier "Ok")
        arguments: (arguments
          (unit_expression)
        )
      )
    )
  )
  (function_item
    name: (identifier "spawn_task")
    type_parameters: (type_parameters
      (constrained_type_parameter
        left: (type_identifier "F")
        bounds: (trait_bounds
          (generic_type
            type: (type_identifier "Future")
            type_arguments: (type_arguments
              (type_binding
                name: (type_identifier "Output")
                type: (unit_type)
              )
            )
          )
        )
      )
    )
    parameters: (parameters
      (parameter
        pattern: (identifier "future")
        type: (type_identifier "F")
      )
    )
    body: (block
      (line_comment)
      (expression_statement
        (call_expression
          function: (scoped_identifier "std::hint::black_box"
            path: (scoped_identifier "std::hint"
              path: (identifier "std")
              name: (identifier "hint")
            )
            name: (identifier "black_box")
          )
          arguments: (arguments
            (identifier "future")
          )
        )
      )
    )
  )
  (function_item
    (function_modifiers)
    name: (identifier "main")
    parameters: (parameters)
    body: (block
      (let_declaration
        value: (await_expression
          (call_expression
            function: (identifier "process_data")
            arguments: (arguments)
          )
        )
      )
      (expression_statement
        (call_expression
          function: (identifier "spawn_task")
          arguments: (arguments
            (async_block
              (block
                (let_declaration
                  pattern: (identifier "data")
                  value: (call_expression
                    function: (field_expression
                      value: (await_expression
                        (call_expression
                          function: (identifier "fetch_data")
                          arguments: (arguments)
                        )
                      )
                      field: (field_identifier "unwrap")
                    )
                    arguments: (arguments)
                  )
                )
                (expression_statement
                  (macro_invocation
                    macro: (identifier "println")
                    (token_tree
                      (string_literal ""In spawn: {}""
                        (string_content)
                      )
                      (identifier "data")
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
)

IR:
IntermediateRepresentation {
    file_path: "tests/integration/language/rust/dependency_resolver/fixtures/async_dependencies.rs",
    definitions: [
        Definition { position: { 1:18 to 1:24 }, name: "Future", definition_type: ImportDefinition, scope_id: Some(0), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 3:10 to 3:20 }, name: "fetch_data", definition_type: FunctionDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 7:10 to 7:22 }, name: "process_data", definition_type: FunctionDefinition, scope_id: Some(3), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 8:9 to 8:13 }, name: "data", definition_type: VariableDefinition, scope_id: Some(4), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 13:4 to 13:14 }, name: "spawn_task", definition_type: FunctionDefinition, scope_id: Some(5), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 13:15 to 13:16 }, name: "F", definition_type: TypeDefinition, scope_id: Some(5), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 13:39 to 13:45 }, name: "future", definition_type: VariableDefinition, scope_id: Some(5), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 18:10 to 18:14 }, name: "main", definition_type: FunctionDefinition, scope_id: Some(7), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 22:13 to 22:17 }, name: "data", definition_type: VariableDefinition, scope_id: Some(9), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
    ],
    dependencies: [
        Dependency { source_line: 8, target_line: 3, symbol: "fetch_data", dependency_type: FunctionCall, context: Some("CallExpression:8:16") },
        Dependency { source_line: 9, target_line: 8, symbol: "data", dependency_type: VariableUse, context: Some("Identifier:9:31") },
        Dependency { source_line: 15, target_line: 13, symbol: "future", dependency_type: VariableUse, context: Some("Identifier:15:26") },
        Dependency { source_line: 19, target_line: 7, symbol: "process_data", dependency_type: FunctionCall, context: Some("CallExpression:19:13") },
        Dependency { source_line: 21, target_line: 13, symbol: "spawn_task", dependency_type: FunctionCall, context: Some("CallExpression:21:5") },
        Dependency { source_line: 22, target_line: 3, symbol: "fetch_data", dependency_type: FunctionCall, context: Some("CallExpression:22:20") },
        Dependency { source_line: 23, target_line: 22, symbol: "data", dependency_type: VariableUse, context: Some("Identifier:23:34") },
    ],
    usage: [
        Usage { position: { 1:5 to 1:8 }, name: "std", kind: TypeIdentifier, context: Some("scoped_identifier") },
        Usage { position: { 1:10 to 1:16 }, name: "future", kind: TypeIdentifier, context: Some("scoped_identifier") },
        Usage { position: { 1:18 to 1:24 }, name: "Future", kind: TypeIdentifier, context: Some("scoped_identifier") },
        Usage { position: { 3:26 to 3:32 }, name: "Result", kind: TypeIdentifier, context: None },
        Usage { position: { 3:33 to 3:39 }, name: "String", kind: TypeIdentifier, context: None },
        Usage { position: { 3:41 to 3:47 }, name: "String", kind: TypeIdentifier, context: None },
        Usage { position: { 4:5 to 4:27 }, name: "Ok", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 4:8 to 4:26 }, name: "\"data\".to_string", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 4:8 to 4:24 }, name: "to_string", kind: FieldExpression, context: Some("field_expression") },
        Usage { position: { 7:28 to 7:34 }, name: "Result", kind: TypeIdentifier, context: None },
        Usage { position: { 7:39 to 7:45 }, name: "String", kind: TypeIdentifier, context: None },
        Usage { position: { 8:16 to 8:28 }, name: "fetch_data", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 9:5 to 9:12 }, name: "println", kind: Identifier, context: None },
        Usage { position: { 9:31 to 9:35 }, name: "data", kind: Identifier, context: None },
        Usage { position: { 10:5 to 10:11 }, name: "Ok", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 13:47 to 13:48 }, name: "F", kind: TypeIdentifier, context: None },
        Usage { position: { 15:5 to 15:33 }, name: "std::hint::black_box", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 15:5 to 15:8 }, name: "std", kind: Identifier, context: Some("scoped_identifier") },
        Usage { position: { 15:10 to 15:14 }, name: "hint", kind: Identifier, context: Some("scoped_identifier") },
        Usage { position: { 15:16 to 15:25 }, name: "black_box", kind: Identifier, context: Some("scoped_identifier") },
        Usage { position: { 15:26 to 15:32 }, name: "future", kind: Identifier, context: Some("call_expression") },
        Usage { position: { 19:13 to 19:27 }, name: "process_data", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 21:5 to 24:7 }, name: "spawn_task", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 22:20 to 22:47 }, name: "fetch_data().await.unwrap", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 22:20 to 22:45 }, name: "unwrap", kind: FieldExpression, context: Some("field_expression") },
        Usage { position: { 22:20 to 22:32 }, name: "fetch_data", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 23:9 to 23:16 }, name: "println", kind: Identifier, context: Some("call_expression") },
        Usage { position: { 23:34 to 23:38 }, name: "data", kind: Identifier, context: Some("call_expression") },
    ],
    analysis_metadata: AnalysisMetadata {
        language: "Rust",
        total_lines: 25,
        analysis_timestamp: "now",
        lintric_version: "0.1.0",
    },
}
