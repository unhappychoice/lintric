---
source: crates/core/tests/integration/language/typescript/dependency_resolver/typescript_integration_tests.rs
expression: ir_snapshot_content
---
Source Code:
namespace Utils {
    export function helper(): number {
        return 42;
    }
    
    export class Calculator {
        add(a: number, b: number): number {
            return a + b;
        }
    }
    
    export namespace Inner {
        export function deepFunction(): number {
            return helper() + 1;
        }
    }
}

function main() {
    const result = Utils.helper();
    const calc = new Utils.Calculator();
    const sum = calc.add(1, 2);
    const deep = Utils.Inner.deepFunction();
    
    console.log(result, sum, deep);
}

AST:
(program
  (expression_statement
    (internal_module
      name: (identifier "Utils")
      body: (statement_block
        (export_statement
          declaration: (function_declaration
            name: (identifier "helper")
            parameters: (formal_parameters)
            return_type: (type_annotation
              (predefined_type "number")
            )
            body: (statement_block
              (return_statement
                (number "42")
              )
            )
          )
        )
        (export_statement
          declaration: (class_declaration
            name: (type_identifier "Calculator")
            body: (class_body
              (method_definition
                name: (property_identifier "add")
                parameters: (formal_parameters
                  (required_parameter
                    pattern: (identifier "a")
                    type: (type_annotation
                      (predefined_type "number")
                    )
                  )
                  (required_parameter
                    pattern: (identifier "b")
                    type: (type_annotation
                      (predefined_type "number")
                    )
                  )
                )
                return_type: (type_annotation
                  (predefined_type "number")
                )
                body: (statement_block
                  (return_statement
                    (binary_expression
                      left: (identifier "a")
                      right: (identifier "b")
                    )
                  )
                )
              )
            )
          )
        )
        (export_statement
          declaration: (internal_module
            name: (identifier "Inner")
            body: (statement_block
              (export_statement
                declaration: (function_declaration
                  name: (identifier "deepFunction")
                  parameters: (formal_parameters)
                  return_type: (type_annotation
                    (predefined_type "number")
                  )
                  body: (statement_block
                    (return_statement
                      (binary_expression
                        left: (call_expression
                          function: (identifier "helper")
                          arguments: (arguments)
                        )
                        right: (number "1")
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
  (function_declaration
    name: (identifier "main")
    parameters: (formal_parameters)
    body: (statement_block
      (lexical_declaration
        (variable_declarator
          name: (identifier "result")
          value: (call_expression
            function: (member_expression
              object: (identifier "Utils")
              property: (property_identifier "helper")
            )
            arguments: (arguments)
          )
        )
      )
      (lexical_declaration
        (variable_declarator
          name: (identifier "calc")
          value: (new_expression
            constructor: (member_expression
              object: (identifier "Utils")
              property: (property_identifier "Calculator")
            )
            arguments: (arguments)
          )
        )
      )
      (lexical_declaration
        (variable_declarator
          name: (identifier "sum")
          value: (call_expression
            function: (member_expression
              object: (identifier "calc")
              property: (property_identifier "add")
            )
            arguments: (arguments
              (number "1")
              (number "2")
            )
          )
        )
      )
      (lexical_declaration
        (variable_declarator
          name: (identifier "deep")
          value: (call_expression
            function: (member_expression
              object: (member_expression
                object: (identifier "Utils")
                property: (property_identifier "Inner")
              )
              property: (property_identifier "deepFunction")
            )
            arguments: (arguments)
          )
        )
      )
      (expression_statement
        (call_expression
          function: (member_expression
            object: (identifier "console")
            property: (property_identifier "log")
          )
          arguments: (arguments
            (identifier "result")
            (identifier "sum")
            (identifier "deep")
          )
        )
      )
    )
  )
)

IR:
IntermediateRepresentation {
    file_path: "tests/integration/language/typescript/dependency_resolver/fixtures/typescript_namespaces.ts",
    definitions: [
        Definition { position: { 1:11 to 1:16 }, name: "Utils", definition_type: ModuleDefinition, scope_id: Some(0), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 2:21 to 2:27 }, name: "helper", definition_type: FunctionDefinition, scope_id: Some(2), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 6:18 to 6:28 }, name: "Calculator", definition_type: ClassDefinition, scope_id: Some(3), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 7:9 to 7:12 }, name: "add", definition_type: MethodDefinition, scope_id: Some(4), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 7:13 to 7:14 }, name: "a", definition_type: VariableDefinition, scope_id: Some(4), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 7:24 to 7:25 }, name: "b", definition_type: VariableDefinition, scope_id: Some(4), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 12:22 to 12:27 }, name: "Inner", definition_type: ModuleDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 13:25 to 13:37 }, name: "deepFunction", definition_type: FunctionDefinition, scope_id: Some(6), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 19:10 to 19:14 }, name: "main", definition_type: FunctionDefinition, scope_id: Some(7), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 20:11 to 20:17 }, name: "result", definition_type: VariableDefinition, scope_id: Some(7), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 21:11 to 21:15 }, name: "calc", definition_type: VariableDefinition, scope_id: Some(7), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 22:11 to 22:14 }, name: "sum", definition_type: VariableDefinition, scope_id: Some(7), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 23:11 to 23:15 }, name: "deep", definition_type: VariableDefinition, scope_id: Some(7), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
    ],
    dependencies: [
        Dependency { source_line: 8, target_line: 7, symbol: "a", dependency_type: VariableUse, context: Some("Identifier:8:20") },
        Dependency { source_line: 8, target_line: 7, symbol: "b", dependency_type: VariableUse, context: Some("Identifier:8:24") },
        Dependency { source_line: 14, target_line: 2, symbol: "helper", dependency_type: FunctionCall, context: Some("CallExpression:14:20") },
        Dependency { source_line: 20, target_line: 1, symbol: "Utils", dependency_type: VariableUse, context: Some("Identifier:20:20") },
        Dependency { source_line: 20, target_line: 2, symbol: "helper", dependency_type: StructFieldAccess, context: Some("FieldExpression:20:26") },
        Dependency { source_line: 21, target_line: 1, symbol: "Utils", dependency_type: VariableUse, context: Some("Identifier:21:22") },
        Dependency { source_line: 21, target_line: 6, symbol: "Calculator", dependency_type: StructFieldAccess, context: Some("FieldExpression:21:28") },
        Dependency { source_line: 22, target_line: 21, symbol: "calc", dependency_type: VariableUse, context: Some("Identifier:22:17") },
        Dependency { source_line: 22, target_line: 7, symbol: "add", dependency_type: StructFieldAccess, context: Some("FieldExpression:22:22") },
        Dependency { source_line: 23, target_line: 1, symbol: "Utils", dependency_type: VariableUse, context: Some("Identifier:23:18") },
        Dependency { source_line: 23, target_line: 12, symbol: "Inner", dependency_type: StructFieldAccess, context: Some("FieldExpression:23:24") },
        Dependency { source_line: 23, target_line: 13, symbol: "deepFunction", dependency_type: StructFieldAccess, context: Some("FieldExpression:23:30") },
        Dependency { source_line: 25, target_line: 20, symbol: "result", dependency_type: VariableUse, context: Some("Identifier:25:17") },
        Dependency { source_line: 25, target_line: 22, symbol: "sum", dependency_type: VariableUse, context: Some("Identifier:25:25") },
        Dependency { source_line: 25, target_line: 23, symbol: "deep", dependency_type: VariableUse, context: Some("Identifier:25:30") },
    ],
    usage: [
        Usage { position: { 1:11 to 1:16 }, name: "Utils", kind: Identifier, context: None },
        Usage { position: { 7:9 to 7:12 }, name: "add", kind: FieldExpression, context: None },
        Usage { position: { 8:20 to 8:21 }, name: "a", kind: Identifier, context: None },
        Usage { position: { 8:24 to 8:25 }, name: "b", kind: Identifier, context: None },
        Usage { position: { 12:22 to 12:27 }, name: "Inner", kind: Identifier, context: None },
        Usage { position: { 14:20 to 14:28 }, name: "helper", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 20:20 to 20:34 }, name: "Utils.helper", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 20:20 to 20:25 }, name: "Utils", kind: Identifier, context: Some("call_expression") },
        Usage { position: { 20:26 to 20:32 }, name: "helper", kind: FieldExpression, context: Some("call_expression") },
        Usage { position: { 21:22 to 21:27 }, name: "Utils", kind: Identifier, context: None },
        Usage { position: { 21:28 to 21:38 }, name: "Calculator", kind: FieldExpression, context: None },
        Usage { position: { 22:17 to 22:31 }, name: "calc.add", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 22:17 to 22:21 }, name: "calc", kind: Identifier, context: Some("call_expression") },
        Usage { position: { 22:22 to 22:25 }, name: "add", kind: FieldExpression, context: Some("call_expression") },
        Usage { position: { 23:18 to 23:44 }, name: "Utils.Inner.deepFunction", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 23:18 to 23:23 }, name: "Utils", kind: Identifier, context: Some("call_expression") },
        Usage { position: { 23:24 to 23:29 }, name: "Inner", kind: FieldExpression, context: Some("call_expression") },
        Usage { position: { 23:30 to 23:42 }, name: "deepFunction", kind: FieldExpression, context: Some("call_expression") },
        Usage { position: { 25:5 to 25:35 }, name: "console.log", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 25:5 to 25:12 }, name: "console", kind: Identifier, context: Some("call_expression") },
        Usage { position: { 25:13 to 25:16 }, name: "log", kind: FieldExpression, context: Some("call_expression") },
        Usage { position: { 25:17 to 25:23 }, name: "result", kind: Identifier, context: Some("call_expression") },
        Usage { position: { 25:25 to 25:28 }, name: "sum", kind: Identifier, context: Some("call_expression") },
        Usage { position: { 25:30 to 25:34 }, name: "deep", kind: Identifier, context: Some("call_expression") },
    ],
    analysis_metadata: AnalysisMetadata {
        language: "TypeScript",
        total_lines: 26,
        analysis_timestamp: "now",
        lintric_version: "0.1.0",
    },
}
