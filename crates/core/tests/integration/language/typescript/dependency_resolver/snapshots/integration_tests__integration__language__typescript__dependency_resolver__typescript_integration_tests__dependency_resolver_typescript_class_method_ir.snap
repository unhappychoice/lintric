---
source: crates/core/tests/integration/language/typescript/dependency_resolver/typescript_integration_tests.rs
expression: ir_snapshot_content
---
Source Code:
class Calculator {
    private value: number = 0;
    
    add(n: number): void {
        this.value += n;
    }
    
    getValue(): number {
        return this.value;
    }
}

interface Drawable {
    draw(): void;
}

class Circle implements Drawable {
    radius: number;
    
    constructor(radius: number) {
        this.radius = radius;
    }
    
    draw(): void {
        console.log(`Drawing circle with radius ${this.radius}`);
    }
}

function main() {
    const calc = new Calculator();
    calc.add(5);
    console.log(calc.getValue());
    
    const circle = new Circle(10);
    circle.draw();
}

AST:
(program
  (class_declaration
    name: (type_identifier "Calculator")
    body: (class_body
      (public_field_definition
        (accessibility_modifier "private")
        name: (property_identifier "value")
        type: (type_annotation
          (predefined_type "number")
        )
        value: (number "0")
      )
      (method_definition
        name: (property_identifier "add")
        parameters: (formal_parameters
          (required_parameter
            pattern: (identifier "n")
            type: (type_annotation
              (predefined_type "number")
            )
          )
        )
        return_type: (type_annotation
          (predefined_type "void")
        )
        body: (statement_block
          (expression_statement
            (augmented_assignment_expression
              left: (member_expression
                object: (this "this")
                property: (property_identifier "value")
              )
              right: (identifier "n")
            )
          )
        )
      )
      (method_definition
        name: (property_identifier "getValue")
        parameters: (formal_parameters)
        return_type: (type_annotation
          (predefined_type "number")
        )
        body: (statement_block
          (return_statement
            (member_expression
              object: (this "this")
              property: (property_identifier "value")
            )
          )
        )
      )
    )
  )
  (interface_declaration
    name: (type_identifier "Drawable")
    body: (interface_body
      (method_signature
        name: (property_identifier "draw")
        parameters: (formal_parameters)
        return_type: (type_annotation
          (predefined_type "void")
        )
      )
    )
  )
  (class_declaration
    name: (type_identifier "Circle")
    (class_heritage
      (implements_clause
        (type_identifier "Drawable")
      )
    )
    body: (class_body
      (public_field_definition
        name: (property_identifier "radius")
        type: (type_annotation
          (predefined_type "number")
        )
      )
      (method_definition
        name: (property_identifier "constructor")
        parameters: (formal_parameters
          (required_parameter
            pattern: (identifier "radius")
            type: (type_annotation
              (predefined_type "number")
            )
          )
        )
        body: (statement_block
          (expression_statement
            (assignment_expression
              left: (member_expression
                object: (this "this")
                property: (property_identifier "radius")
              )
              right: (identifier "radius")
            )
          )
        )
      )
      (method_definition
        name: (property_identifier "draw")
        parameters: (formal_parameters)
        return_type: (type_annotation
          (predefined_type "void")
        )
        body: (statement_block
          (expression_statement
            (call_expression
              function: (member_expression
                object: (identifier "console")
                property: (property_identifier "log")
              )
              arguments: (arguments
                (template_string
                  (string_fragment)
                  (template_substitution
                    (member_expression
                      object: (this "this")
                      property: (property_identifier "radius")
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
  (function_declaration
    name: (identifier "main")
    parameters: (formal_parameters)
    body: (statement_block
      (lexical_declaration
        (variable_declarator
          name: (identifier "calc")
          value: (new_expression
            constructor: (identifier "Calculator")
            arguments: (arguments)
          )
        )
      )
      (expression_statement
        (call_expression
          function: (member_expression
            object: (identifier "calc")
            property: (property_identifier "add")
          )
          arguments: (arguments
            (number "5")
          )
        )
      )
      (expression_statement
        (call_expression
          function: (member_expression
            object: (identifier "console")
            property: (property_identifier "log")
          )
          arguments: (arguments
            (call_expression
              function: (member_expression
                object: (identifier "calc")
                property: (property_identifier "getValue")
              )
              arguments: (arguments)
            )
          )
        )
      )
      (lexical_declaration
        (variable_declarator
          name: (identifier "circle")
          value: (new_expression
            constructor: (identifier "Circle")
            arguments: (arguments
              (number "10")
            )
          )
        )
      )
      (expression_statement
        (call_expression
          function: (member_expression
            object: (identifier "circle")
            property: (property_identifier "draw")
          )
          arguments: (arguments)
        )
      )
    )
  )
)

IR:
IntermediateRepresentation {
    file_path: "tests/integration/language/typescript/dependency_resolver/fixtures/typescript_class_method.ts",
    definitions: [
        Definition { position: { 1:7 to 1:17 }, name: "Calculator", definition_type: ClassDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 2:13 to 2:18 }, name: "value", definition_type: PropertyDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 4:5 to 4:8 }, name: "add", definition_type: MethodDefinition, scope_id: Some(2), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 4:9 to 4:10 }, name: "n", definition_type: VariableDefinition, scope_id: Some(2), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 8:5 to 8:13 }, name: "getValue", definition_type: MethodDefinition, scope_id: Some(3), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 13:11 to 13:19 }, name: "Drawable", definition_type: InterfaceDefinition, scope_id: Some(4), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 14:5 to 14:9 }, name: "draw", definition_type: MethodDefinition, scope_id: Some(4), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 17:7 to 17:13 }, name: "Circle", definition_type: ClassDefinition, scope_id: Some(5), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 18:5 to 18:11 }, name: "radius", definition_type: PropertyDefinition, scope_id: Some(5), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 20:5 to 20:16 }, name: "constructor", definition_type: MethodDefinition, scope_id: Some(6), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 20:17 to 20:23 }, name: "radius", definition_type: VariableDefinition, scope_id: Some(6), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 24:5 to 24:9 }, name: "draw", definition_type: MethodDefinition, scope_id: Some(7), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 29:10 to 29:14 }, name: "main", definition_type: FunctionDefinition, scope_id: Some(8), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 30:11 to 30:15 }, name: "calc", definition_type: VariableDefinition, scope_id: Some(8), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 34:11 to 34:17 }, name: "circle", definition_type: VariableDefinition, scope_id: Some(8), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
    ],
    dependencies: [
        Dependency { source_line: 5, target_line: 2, symbol: "value", dependency_type: StructFieldAccess, context: Some("field_access") },
        Dependency { source_line: 5, target_line: 4, symbol: "n", dependency_type: VariableUse, context: Some("Identifier:5:23") },
        Dependency { source_line: 9, target_line: 2, symbol: "value", dependency_type: StructFieldAccess, context: Some("field_access") },
        Dependency { source_line: 17, target_line: 13, symbol: "Drawable", dependency_type: TypeReference, context: Some("TypeIdentifier:17:25") },
        Dependency { source_line: 21, target_line: 18, symbol: "radius", dependency_type: StructFieldAccess, context: Some("field_access") },
        Dependency { source_line: 21, target_line: 20, symbol: "radius", dependency_type: VariableUse, context: Some("Identifier:21:23") },
        Dependency { source_line: 25, target_line: 18, symbol: "radius", dependency_type: StructFieldAccess, context: Some("field_access") },
        Dependency { source_line: 30, target_line: 1, symbol: "Calculator", dependency_type: VariableUse, context: Some("Identifier:30:22") },
        Dependency { source_line: 31, target_line: 30, symbol: "calc", dependency_type: VariableUse, context: Some("Identifier:31:5") },
        Dependency { source_line: 31, target_line: 4, symbol: "add", dependency_type: StructFieldAccess, context: Some("FieldExpression:31:10") },
        Dependency { source_line: 32, target_line: 30, symbol: "calc", dependency_type: VariableUse, context: Some("Identifier:32:17") },
        Dependency { source_line: 32, target_line: 8, symbol: "getValue", dependency_type: StructFieldAccess, context: Some("FieldExpression:32:22") },
        Dependency { source_line: 34, target_line: 17, symbol: "Circle", dependency_type: VariableUse, context: Some("Identifier:34:24") },
        Dependency { source_line: 35, target_line: 34, symbol: "circle", dependency_type: VariableUse, context: Some("Identifier:35:5") },
        Dependency { source_line: 35, target_line: 24, symbol: "draw", dependency_type: StructFieldAccess, context: Some("FieldExpression:35:12") },
    ],
    usage: [
        Usage { position: { 2:13 to 2:18 }, name: "value", kind: FieldExpression, context: None },
        Usage { position: { 4:5 to 4:8 }, name: "add", kind: FieldExpression, context: None },
        Usage { position: { 5:14 to 5:19 }, name: "value", kind: FieldExpression, context: None },
        Usage { position: { 5:23 to 5:24 }, name: "n", kind: Identifier, context: None },
        Usage { position: { 8:5 to 8:13 }, name: "getValue", kind: FieldExpression, context: None },
        Usage { position: { 9:21 to 9:26 }, name: "value", kind: FieldExpression, context: None },
        Usage { position: { 14:5 to 14:9 }, name: "draw", kind: FieldExpression, context: None },
        Usage { position: { 17:25 to 17:33 }, name: "Drawable", kind: TypeIdentifier, context: None },
        Usage { position: { 18:5 to 18:11 }, name: "radius", kind: FieldExpression, context: None },
        Usage { position: { 20:5 to 20:16 }, name: "constructor", kind: FieldExpression, context: None },
        Usage { position: { 21:14 to 21:20 }, name: "radius", kind: FieldExpression, context: None },
        Usage { position: { 21:23 to 21:29 }, name: "radius", kind: Identifier, context: None },
        Usage { position: { 24:5 to 24:9 }, name: "draw", kind: FieldExpression, context: None },
        Usage { position: { 25:9 to 25:65 }, name: "console.log", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 25:9 to 25:16 }, name: "console", kind: Identifier, context: Some("call_expression") },
        Usage { position: { 25:17 to 25:20 }, name: "log", kind: FieldExpression, context: Some("call_expression") },
        Usage { position: { 25:56 to 25:62 }, name: "radius", kind: FieldExpression, context: Some("call_expression") },
        Usage { position: { 30:22 to 30:32 }, name: "Calculator", kind: Identifier, context: None },
        Usage { position: { 31:5 to 31:16 }, name: "calc.add", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 31:5 to 31:9 }, name: "calc", kind: Identifier, context: Some("call_expression") },
        Usage { position: { 31:10 to 31:13 }, name: "add", kind: FieldExpression, context: Some("call_expression") },
        Usage { position: { 32:5 to 32:33 }, name: "console.log", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 32:5 to 32:12 }, name: "console", kind: Identifier, context: Some("call_expression") },
        Usage { position: { 32:13 to 32:16 }, name: "log", kind: FieldExpression, context: Some("call_expression") },
        Usage { position: { 32:17 to 32:32 }, name: "calc.getValue", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 32:17 to 32:21 }, name: "calc", kind: Identifier, context: Some("call_expression") },
        Usage { position: { 32:22 to 32:30 }, name: "getValue", kind: FieldExpression, context: Some("call_expression") },
        Usage { position: { 34:24 to 34:30 }, name: "Circle", kind: Identifier, context: None },
        Usage { position: { 35:5 to 35:18 }, name: "circle.draw", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 35:5 to 35:11 }, name: "circle", kind: Identifier, context: Some("call_expression") },
        Usage { position: { 35:12 to 35:16 }, name: "draw", kind: FieldExpression, context: Some("call_expression") },
    ],
    analysis_metadata: AnalysisMetadata {
        language: "TypeScript",
        total_lines: 36,
        analysis_timestamp: "now",
        lintric_version: "0.1.0",
    },
}
