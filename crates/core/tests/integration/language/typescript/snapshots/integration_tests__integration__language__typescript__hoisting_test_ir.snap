---
source: crates/core/tests/integration/language/typescript/mod.rs
expression: ir_snapshot_content
---
Source Code:
function main() {
    // Function hoisting - should create dependency even though helper is defined later
    const result = helper();
    
    // Variable forward reference - should NOT create dependency (let/const are not hoisted)
    const y = x + 1;
    const x = 42;
}

// Helper function defined after main - but should still be accessible due to hoisting
function helper(): number {
    return 42;
}

// Test interface hoisting
function useInterface() {
    const obj: MyInterface = { field: 10 };
}

interface MyInterface {
    field: number;
}

// Test class hoisting
function useClass() {
    const instance = new MyClass();
}

class MyClass {
    constructor() {}
}

// Test type hoisting
function useType(): MyType {
    return 42;
}

type MyType = number;

// Test enum hoisting
function useEnum() {
    const value = MyEnum.Value1;
}

enum MyEnum {
    Value1,
    Value2
}

AST:
(program
  (function_declaration
    name: (identifier "main")
    parameters: (formal_parameters)
    body: (statement_block
      (comment)
      (lexical_declaration
        (variable_declarator
          name: (identifier "result")
          value: (call_expression
            function: (identifier "helper")
            arguments: (arguments)
          )
        )
      )
      (comment)
      (lexical_declaration
        (variable_declarator
          name: (identifier "y")
          value: (binary_expression
            left: (identifier "x")
            right: (number "1")
          )
        )
      )
      (lexical_declaration
        (variable_declarator
          name: (identifier "x")
          value: (number "42")
        )
      )
    )
  )
  (comment)
  (function_declaration
    name: (identifier "helper")
    parameters: (formal_parameters)
    return_type: (type_annotation
      (predefined_type "number")
    )
    body: (statement_block
      (return_statement
        (number "42")
      )
    )
  )
  (comment)
  (function_declaration
    name: (identifier "useInterface")
    parameters: (formal_parameters)
    body: (statement_block
      (lexical_declaration
        (variable_declarator
          name: (identifier "obj")
          type: (type_annotation
            (type_identifier "MyInterface")
          )
          value: (object
            (pair
              key: (property_identifier "field")
              value: (number "10")
            )
          )
        )
      )
    )
  )
  (interface_declaration
    name: (type_identifier "MyInterface")
    body: (interface_body
      (property_signature
        name: (property_identifier "field")
        type: (type_annotation
          (predefined_type "number")
        )
      )
    )
  )
  (comment)
  (function_declaration
    name: (identifier "useClass")
    parameters: (formal_parameters)
    body: (statement_block
      (lexical_declaration
        (variable_declarator
          name: (identifier "instance")
          value: (new_expression
            constructor: (identifier "MyClass")
            arguments: (arguments)
          )
        )
      )
    )
  )
  (class_declaration
    name: (type_identifier "MyClass")
    body: (class_body
      (method_definition
        name: (property_identifier "constructor")
        parameters: (formal_parameters)
        body: (statement_block)
      )
    )
  )
  (comment)
  (function_declaration
    name: (identifier "useType")
    parameters: (formal_parameters)
    return_type: (type_annotation
      (type_identifier "MyType")
    )
    body: (statement_block
      (return_statement
        (number "42")
      )
    )
  )
  (type_alias_declaration
    name: (type_identifier "MyType")
    value: (predefined_type "number")
  )
  (comment)
  (function_declaration
    name: (identifier "useEnum")
    parameters: (formal_parameters)
    body: (statement_block
      (lexical_declaration
        (variable_declarator
          name: (identifier "value")
          value: (member_expression
            object: (identifier "MyEnum")
            property: (property_identifier "Value1")
          )
        )
      )
    )
  )
  (enum_declaration
    name: (identifier "MyEnum")
    body: (enum_body
      name: (property_identifier "Value1")
      name: (property_identifier "Value2")
    )
  )
)

IR:
IntermediateRepresentation {
    file_path: "tests/integration/language/typescript/fixtures/hoisting_test.ts",
    definitions: [
        Definition { position: { 1:10 to 1:14 }, name: "main", definition_type: FunctionDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 3:11 to 3:17 }, name: "result", definition_type: VariableDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 6:11 to 6:12 }, name: "y", definition_type: VariableDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 7:11 to 7:12 }, name: "x", definition_type: VariableDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 11:10 to 11:16 }, name: "helper", definition_type: FunctionDefinition, scope_id: Some(2), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 16:10 to 16:22 }, name: "useInterface", definition_type: FunctionDefinition, scope_id: Some(3), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 17:11 to 17:14 }, name: "obj", definition_type: VariableDefinition, scope_id: Some(3), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 20:11 to 20:22 }, name: "MyInterface", definition_type: InterfaceDefinition, scope_id: Some(4), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 21:5 to 21:10 }, name: "field", definition_type: PropertyDefinition, scope_id: Some(4), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 25:10 to 25:18 }, name: "useClass", definition_type: FunctionDefinition, scope_id: Some(5), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 26:11 to 26:19 }, name: "instance", definition_type: VariableDefinition, scope_id: Some(5), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 29:7 to 29:14 }, name: "MyClass", definition_type: ClassDefinition, scope_id: Some(6), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 30:5 to 30:16 }, name: "constructor", definition_type: MethodDefinition, scope_id: Some(7), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 34:10 to 34:17 }, name: "useType", definition_type: FunctionDefinition, scope_id: Some(8), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 38:6 to 38:12 }, name: "MyType", definition_type: TypeDefinition, scope_id: Some(0), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 41:10 to 41:17 }, name: "useEnum", definition_type: FunctionDefinition, scope_id: Some(9), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 42:11 to 42:16 }, name: "value", definition_type: VariableDefinition, scope_id: Some(9), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
    ],
    dependencies: [
        Dependency { source_line: 3, target_line: 11, symbol: "helper", dependency_type: FunctionCall, context: Some("CallExpression:3:20") },
        Dependency { source_line: 6, target_line: 7, symbol: "x", dependency_type: VariableUse, context: Some("Identifier:6:15") },
        Dependency { source_line: 17, target_line: 20, symbol: "MyInterface", dependency_type: TypeReference, context: Some("TypeIdentifier:17:16") },
        Dependency { source_line: 17, target_line: 21, symbol: "field", dependency_type: StructFieldAccess, context: Some("field_access") },
        Dependency { source_line: 26, target_line: 29, symbol: "MyClass", dependency_type: VariableUse, context: Some("Identifier:26:26") },
        Dependency { source_line: 34, target_line: 38, symbol: "MyType", dependency_type: TypeReference, context: Some("TypeIdentifier:34:21") },
    ],
    usage: [
        Usage { position: { 3:20 to 3:28 }, name: "helper", kind: CallExpression, context: Some("call_expression") },
        Usage { position: { 6:15 to 6:16 }, name: "x", kind: Identifier, context: None },
        Usage { position: { 17:16 to 17:27 }, name: "MyInterface", kind: TypeIdentifier, context: None },
        Usage { position: { 17:32 to 17:37 }, name: "field", kind: FieldExpression, context: None },
        Usage { position: { 21:5 to 21:10 }, name: "field", kind: FieldExpression, context: None },
        Usage { position: { 26:26 to 26:33 }, name: "MyClass", kind: Identifier, context: None },
        Usage { position: { 30:5 to 30:16 }, name: "constructor", kind: FieldExpression, context: None },
        Usage { position: { 34:21 to 34:27 }, name: "MyType", kind: TypeIdentifier, context: None },
        Usage { position: { 42:19 to 42:25 }, name: "MyEnum", kind: Identifier, context: None },
        Usage { position: { 42:26 to 42:32 }, name: "Value1", kind: FieldExpression, context: None },
        Usage { position: { 45:6 to 45:12 }, name: "MyEnum", kind: Identifier, context: None },
        Usage { position: { 46:5 to 46:11 }, name: "Value1", kind: FieldExpression, context: None },
        Usage { position: { 47:5 to 47:11 }, name: "Value2", kind: FieldExpression, context: None },
    ],
    analysis_metadata: AnalysisMetadata {
        language: "TypeScript",
        total_lines: 48,
        analysis_timestamp: "now",
        lintric_version: "0.1.0",
    },
}
