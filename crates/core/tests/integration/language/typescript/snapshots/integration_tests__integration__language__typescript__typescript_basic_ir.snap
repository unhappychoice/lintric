---
source: crates/core/tests/integration/language/typescript/mod.rs
expression: ir_snapshot_content
---
Source Code:
const x = 1;
let y = x + 2;
function foo() {
    return y;
}

AST:
(program
  (lexical_declaration
    (variable_declarator
      name: (identifier "x")
      value: (number "1")
    )
  )
  (lexical_declaration
    (variable_declarator
      name: (identifier "y")
      value: (binary_expression
        left: (identifier "x")
        right: (number "2")
      )
    )
  )
  (function_declaration
    name: (identifier "foo")
    parameters: (formal_parameters)
    body: (statement_block
      (return_statement
        (identifier "y")
      )
    )
  )
)

IR:
IntermediateRepresentation {
    file_path: "tests/integration/language/typescript/fixtures/basic_typescript_code.ts",
    definitions: [
        Definition { position: { 1:7 to 1:8 }, name: "x", definition_type: VariableDefinition, scope_id: Some(0), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 2:5 to 2:6 }, name: "y", definition_type: VariableDefinition, scope_id: Some(0), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
        Definition { position: { 3:10 to 3:13 }, name: "foo", definition_type: FunctionDefinition, scope_id: Some(1), accessibility: Some(ScopeLocal), is_hoisted: Some(false) },
    ],
    dependencies: [
        Dependency { source_line: 2, target_line: 1, symbol: "x", dependency_type: VariableUse, context: Some("Identifier:2:9") },
        Dependency { source_line: 4, target_line: 2, symbol: "y", dependency_type: VariableUse, context: Some("Identifier:4:12") },
    ],
    usage: [
        Usage { position: { 2:9 to 2:10 }, name: "x", kind: Identifier, context: None },
        Usage { position: { 4:12 to 4:13 }, name: "y", kind: Identifier, context: None },
    ],
    analysis_metadata: AnalysisMetadata {
        language: "TypeScript",
        total_lines: 5,
        analysis_timestamp: "now",
        lintric_version: "0.1.0",
    },
}
